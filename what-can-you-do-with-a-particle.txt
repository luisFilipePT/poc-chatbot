
================================================================================
File: .gitignore
Size: 253 B
================================================================================

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


================================================================================
File: LICENSE
Size: 1.07 kB
================================================================================

MIT License

Copyright (c) 2024 Pouria Ezzati

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================================================================================
File: README.md
Size: 1.54 kB
================================================================================

## what can you do with a particle?

an animation built with **three.js**, **react three fiber**, **webgl** and **gsap** for the [what can you do with a particle?](https://www.youtube.com/watch?v=7aynyPX80BQ) video.

<p align="center">
  <img src="https://github.com/poeti8/what-can-you-do-with-a-particle/assets/23660003/68ae2352-3d31-4dba-8048-6305aae628cd.gif" alt="demo" />
</p>

<p align="center">
  <a href="https://www.youtube.com/watch?v=7aynyPX80BQ" target="__blank" title="view experiment">watch video ↗︎</a>
</p>

## run locally

you need [node.js](https://nodejs.org) and [pnpm](https://pnpm.io/) package manager. (npm should work fine too).

1. install dependencies via `pnpm install` or `npm install`.
2. run the app via `pnpm dev` or `npm run dev`.
3. visit `http://localhost:5173`

i made this animation for myself only to record the screen with no intention to deploy it on a website. naturally, i did not care about the performace as long as it would run smoothly on my computer. so i'm unsure how it might run or look on your device.

the short animation [particle dreams (1988)](https://www.youtube.com/watch?v=5QEp-oPaQto) by karl sims was a big inspiration to me for create this video. 

## assets

* wave image from paul bourke texture library on [paulbourke.net](https://paulbourke.net/texturelibrary/displayimage.cgi?water/waves.jpg)
* original female head model by artworkcgi on [cgtrader.com](https://www.cgtrader.com/free-3d-models/character/woman/female-head-3d-model-5879537d-cfc2-4173-a929-055341ddeea2)


================================================================================
File: global.d.ts
Size: 159 B
================================================================================

declare module "*.glsl" {
  const content: string;
  export default content;
}

declare module "*.gltf" {
  const content: string;
  export default content;
}


================================================================================
File: index.html
Size: 319 B
================================================================================

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>What Can You Do with a Particle?</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


================================================================================
File: package.json
Size: 684 B
================================================================================

{
  "name": "what-can-you-do-with-a-particle",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@react-three/drei": "^9.99.0",
    "@react-three/fiber": "^8.15.16",
    "gsap": "^3.12.5",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "three": "^0.158.0",
    "zustand": "^4.5.1"
  },
  "devDependencies": {
    "@types/react": "^18.2.57",
    "@types/react-dom": "^18.2.19",
    "@types/three": "^0.158.3",
    "@vitejs/plugin-react": "^4.2.1",
    "typescript": "^5.3.3",
    "vite": "^4.5.2",
    "vite-plugin-glsl": "^1.2.1"
  }
}


================================================================================
File: pnpm-lock.yaml
Size: 49.75 kB
================================================================================

lockfileVersion: '6.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

dependencies:
  '@react-three/drei':
    specifier: ^9.99.0
    version: 9.99.0(@react-three/fiber@8.15.16)(@types/react@18.2.57)(@types/three@0.158.3)(react-dom@18.2.0)(react@18.2.0)(three@0.158.0)
  '@react-three/fiber':
    specifier: ^8.15.16
    version: 8.15.16(react-dom@18.2.0)(react@18.2.0)(three@0.158.0)
  gsap:
    specifier: ^3.12.5
    version: 3.12.5
  react:
    specifier: ^18.2.0
    version: 18.2.0
  react-dom:
    specifier: ^18.2.0
    version: 18.2.0(react@18.2.0)
  three:
    specifier: ^0.158.0
    version: 0.158.0
  zustand:
    specifier: ^4.5.1
    version: 4.5.1(@types/react@18.2.57)(react@18.2.0)

devDependencies:
  '@types/react':
    specifier: ^18.2.57
    version: 18.2.57
  '@types/react-dom':
    specifier: ^18.2.19
    version: 18.2.19
  '@types/three':
    specifier: ^0.158.3
    version: 0.158.3
  '@vitejs/plugin-react':
    specifier: ^4.2.1
    version: 4.2.1(vite@4.5.2)
  typescript:
    specifier: ^5.3.3
    version: 5.3.3
  vite:
    specifier: ^4.5.2
    version: 4.5.2
  vite-plugin-glsl:
    specifier: ^1.2.1
    version: 1.2.1(vite@4.5.2)

packages:

  /@ampproject/remapping@2.2.1:
    resolution: {integrity: sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==}
    engines: {node: '>=6.0.0'}
    dependencies:
      '@jridgewell/gen-mapping': 0.3.3
      '@jridgewell/trace-mapping': 0.3.22
    dev: true

  /@babel/code-frame@7.23.5:
    resolution: {integrity: sha512-CgH3s1a96LipHCmSUmYFPwY7MNx8C3avkq7i4Wl3cfa662ldtUe4VM1TPXX70pfmrlWTb6jLqTYrZyT2ZTJBgA==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/highlight': 7.23.4
      chalk: 2.4.2
    dev: true

  /@babel/compat-data@7.23.5:
    resolution: {integrity: sha512-uU27kfDRlhfKl+w1U6vp16IuvSLtjAxdArVXPa9BvLkrr7CYIsxH5adpHObeAGY/41+syctUWOZ140a2Rvkgjw==}
    engines: {node: '>=6.9.0'}
    dev: true

  /@babel/core@7.23.9:
    resolution: {integrity: sha512-5q0175NOjddqpvvzU+kDiSOAk4PfdO6FvwCWoQ6RO7rTzEe8vlo+4HVfcnAREhD4npMs0e9uZypjTwzZPCf/cw==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@ampproject/remapping': 2.2.1
      '@babel/code-frame': 7.23.5
      '@babel/generator': 7.23.6
      '@babel/helper-compilation-targets': 7.23.6
      '@babel/helper-module-transforms': 7.23.3(@babel/core@7.23.9)
      '@babel/helpers': 7.23.9
      '@babel/parser': 7.23.9
      '@babel/template': 7.23.9
      '@babel/traverse': 7.23.9
      '@babel/types': 7.23.9
      convert-source-map: 2.0.0
      debug: 4.3.4
      gensync: 1.0.0-beta.2
      json5: 2.2.3
      semver: 6.3.1
    transitivePeerDependencies:
      - supports-color
    dev: true

  /@babel/generator@7.23.6:
    resolution: {integrity: sha512-qrSfCYxYQB5owCmGLbl8XRpX1ytXlpueOb0N0UmQwA073KZxejgQTzAmJezxvpwQD9uGtK2shHdi55QT+MbjIw==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/types': 7.23.9
      '@jridgewell/gen-mapping': 0.3.3
      '@jridgewell/trace-mapping': 0.3.22
      jsesc: 2.5.2
    dev: true

  /@babel/helper-compilation-targets@7.23.6:
    resolution: {integrity: sha512-9JB548GZoQVmzrFgp8o7KxdgkTGm6xs9DW0o/Pim72UDjzr5ObUQ6ZzYPqA+g9OTS2bBQoctLJrky0RDCAWRgQ==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/compat-data': 7.23.5
      '@babel/helper-validator-option': 7.23.5
      browserslist: 4.23.0
      lru-cache: 5.1.1
      semver: 6.3.1
    dev: true

  /@babel/helper-environment-visitor@7.22.20:
    resolution: {integrity: sha512-zfedSIzFhat/gFhWfHtgWvlec0nqB9YEIVrpuwjruLlXfUSnA8cJB0miHKwqDnQ7d32aKo2xt88/xZptwxbfhA==}
    engines: {node: '>=6.9.0'}
    dev: true

  /@babel/helper-function-name@7.23.0:
    resolution: {integrity: sha512-OErEqsrxjZTJciZ4Oo+eoZqeW9UIiOcuYKRJA4ZAgV9myA+pOXhhmpfNCKjEH/auVfEYVFJ6y1Tc4r0eIApqiw==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/template': 7.23.9
      '@babel/types': 7.23.9
    dev: true

  /@babel/helper-hoist-variables@7.22.5:
    resolution: {integrity: sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/types': 7.23.9
    dev: true

  /@babel/helper-module-imports@7.22.15:
    resolution: {integrity: sha512-0pYVBnDKZO2fnSPCrgM/6WMc7eS20Fbok+0r88fp+YtWVLZrp4CkafFGIp+W0VKw4a22sgebPT99y+FDNMdP4w==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/types': 7.23.9
    dev: true

  /@babel/helper-module-transforms@7.23.3(@babel/core@7.23.9):
    resolution: {integrity: sha512-7bBs4ED9OmswdfDzpz4MpWgSrV7FXlc3zIagvLFjS5H+Mk7Snr21vQ6QwrsoCGMfNC4e4LQPdoULEt4ykz0SRQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0
    dependencies:
      '@babel/core': 7.23.9
      '@babel/helper-environment-visitor': 7.22.20
      '@babel/helper-module-imports': 7.22.15
      '@babel/helper-simple-access': 7.22.5
      '@babel/helper-split-export-declaration': 7.22.6
      '@babel/helper-validator-identifier': 7.22.20
    dev: true

  /@babel/helper-plugin-utils@7.22.5:
    resolution: {integrity: sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==}
    engines: {node: '>=6.9.0'}
    dev: true

  /@babel/helper-simple-access@7.22.5:
    resolution: {integrity: sha512-n0H99E/K+Bika3++WNL17POvo4rKWZ7lZEp1Q+fStVbUi8nxPQEBOlTmCOxW/0JsS56SKKQ+ojAe2pHKJHN35w==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/types': 7.23.9
    dev: true

  /@babel/helper-split-export-declaration@7.22.6:
    resolution: {integrity: sha512-AsUnxuLhRYsisFiaJwvp1QF+I3KjD5FOxut14q/GzovUe6orHLesW2C7d754kRm53h5gqrz6sFl6sxc4BVtE/g==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/types': 7.23.9
    dev: true

  /@babel/helper-string-parser@7.23.4:
    resolution: {integrity: sha512-803gmbQdqwdf4olxrX4AJyFBV/RTr3rSmOj0rKwesmzlfhYNDEs+/iOcznzpNWlJlIlTJC2QfPFcHB6DlzdVLQ==}
    engines: {node: '>=6.9.0'}
    dev: true

  /@babel/helper-validator-identifier@7.22.20:
    resolution: {integrity: sha512-Y4OZ+ytlatR8AI+8KZfKuL5urKp7qey08ha31L8b3BwewJAoJamTzyvxPR/5D+KkdJCGPq/+8TukHBlY10FX9A==}
    engines: {node: '>=6.9.0'}
    dev: true

  /@babel/helper-validator-option@7.23.5:
    resolution: {integrity: sha512-85ttAOMLsr53VgXkTbkx8oA6YTfT4q7/HzXSLEYmjcSTJPMPQtvq1BD79Byep5xMUYbGRzEpDsjUf3dyp54IKw==}
    engines: {node: '>=6.9.0'}
    dev: true

  /@babel/helpers@7.23.9:
    resolution: {integrity: sha512-87ICKgU5t5SzOT7sBMfCOZQ2rHjRU+Pcb9BoILMYz600W6DkVRLFBPwQ18gwUVvggqXivaUakpnxWQGbpywbBQ==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/template': 7.23.9
      '@babel/traverse': 7.23.9
      '@babel/types': 7.23.9
    transitivePeerDependencies:
      - supports-color
    dev: true

  /@babel/highlight@7.23.4:
    resolution: {integrity: sha512-acGdbYSfp2WheJoJm/EBBBLh/ID8KDc64ISZ9DYtBmC8/Q204PZJLHyzeB5qMzJ5trcOkybd78M4x2KWsUq++A==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/helper-validator-identifier': 7.22.20
      chalk: 2.4.2
      js-tokens: 4.0.0
    dev: true

  /@babel/parser@7.23.9:
    resolution: {integrity: sha512-9tcKgqKbs3xGJ+NtKF2ndOBBLVwPjl1SHxPQkd36r3Dlirw3xWUeGaTbqr7uGZcTaxkVNwc+03SVP7aCdWrTlA==}
    engines: {node: '>=6.0.0'}
    hasBin: true
    dependencies:
      '@babel/types': 7.23.9
    dev: true

  /@babel/plugin-transform-react-jsx-self@7.23.3(@babel/core@7.23.9):
    resolution: {integrity: sha512-qXRvbeKDSfwnlJnanVRp0SfuWE5DQhwQr5xtLBzp56Wabyo+4CMosF6Kfp+eOD/4FYpql64XVJ2W0pVLlJZxOQ==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0
    dependencies:
      '@babel/core': 7.23.9
      '@babel/helper-plugin-utils': 7.22.5
    dev: true

  /@babel/plugin-transform-react-jsx-source@7.23.3(@babel/core@7.23.9):
    resolution: {integrity: sha512-91RS0MDnAWDNvGC6Wio5XYkyWI39FMFO+JK9+4AlgaTH+yWwVTsw7/sn6LK0lH7c5F+TFkpv/3LfCJ1Ydwof/g==}
    engines: {node: '>=6.9.0'}
    peerDependencies:
      '@babel/core': ^7.0.0-0
    dependencies:
      '@babel/core': 7.23.9
      '@babel/helper-plugin-utils': 7.22.5
    dev: true

  /@babel/runtime@7.23.9:
    resolution: {integrity: sha512-0CX6F+BI2s9dkUqr08KFrAIZgNFj75rdBU/DjCyYLIaV/quFjkk6T+EJ2LkZHyZTbEV4L5p97mNkUsHl2wLFAw==}
    engines: {node: '>=6.9.0'}
    dependencies:
      regenerator-runtime: 0.14.1
    dev: false

  /@babel/template@7.23.9:
    resolution: {integrity: sha512-+xrD2BWLpvHKNmX2QbpdpsBaWnRxahMwJjO+KZk2JOElj5nSmKezyS1B4u+QbHMTX69t4ukm6hh9lsYQ7GHCKA==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/code-frame': 7.23.5
      '@babel/parser': 7.23.9
      '@babel/types': 7.23.9
    dev: true

  /@babel/traverse@7.23.9:
    resolution: {integrity: sha512-I/4UJ9vs90OkBtY6iiiTORVMyIhJ4kAVmsKo9KFc8UOxMeUfi2hvtIBsET5u9GizXE6/GFSuKCTNfgCswuEjRg==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/code-frame': 7.23.5
      '@babel/generator': 7.23.6
      '@babel/helper-environment-visitor': 7.22.20
      '@babel/helper-function-name': 7.23.0
      '@babel/helper-hoist-variables': 7.22.5
      '@babel/helper-split-export-declaration': 7.22.6
      '@babel/parser': 7.23.9
      '@babel/types': 7.23.9
      debug: 4.3.4
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color
    dev: true

  /@babel/types@7.23.9:
    resolution: {integrity: sha512-dQjSq/7HaSjRM43FFGnv5keM2HsxpmyV1PfaSVm0nzzjwwTmjOe6J4bC8e3+pTEIgHaHj+1ZlLThRJ2auc/w1Q==}
    engines: {node: '>=6.9.0'}
    dependencies:
      '@babel/helper-string-parser': 7.23.4
      '@babel/helper-validator-identifier': 7.22.20
      to-fast-properties: 2.0.0
    dev: true

  /@esbuild/android-arm64@0.18.20:
    resolution: {integrity: sha512-Nz4rJcchGDtENV0eMKUNa6L12zz2zBDXuhj/Vjh18zGqB44Bi7MBMSXjgunJgjRhCmKOjnPuZp4Mb6OKqtMHLQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/android-arm@0.18.20:
    resolution: {integrity: sha512-fyi7TDI/ijKKNZTUJAQqiG5T7YjJXgnzkURqmGj13C6dCqckZBLdl4h7bkhHt/t0WP+zO9/zwroDvANaOqO5Sw==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/android-x64@0.18.20:
    resolution: {integrity: sha512-8GDdlePJA8D6zlZYJV/jnrRAi6rOiNaCC/JclcXpB+KIuvfBN4owLtgzY2bsxnx666XjJx2kDPUmnTtR8qKQUg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/darwin-arm64@0.18.20:
    resolution: {integrity: sha512-bxRHW5kHU38zS2lPTPOyuyTm+S+eobPUnTNkdJEfAddYgEcll4xkT8DB9d2008DtTbl7uJag2HuE5NZAZgnNEA==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/darwin-x64@0.18.20:
    resolution: {integrity: sha512-pc5gxlMDxzm513qPGbCbDukOdsGtKhfxD1zJKXjCCcU7ju50O7MeAZ8c4krSJcOIJGFR+qx21yMMVYwiQvyTyQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/freebsd-arm64@0.18.20:
    resolution: {integrity: sha512-yqDQHy4QHevpMAaxhhIwYPMv1NECwOvIpGCZkECn8w2WFHXjEwrBn3CeNIYsibZ/iZEUemj++M26W3cNR5h+Tw==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/freebsd-x64@0.18.20:
    resolution: {integrity: sha512-tgWRPPuQsd3RmBZwarGVHZQvtzfEBOreNuxEMKFcd5DaDn2PbBxfwLcj4+aenoh7ctXcbXmOQIn8HI6mCSw5MQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-arm64@0.18.20:
    resolution: {integrity: sha512-2YbscF+UL7SQAVIpnWvYwM+3LskyDmPhe31pE7/aoTMFKKzIc9lLbyGUpmmb8a8AixOL61sQ/mFh3jEjHYFvdA==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-arm@0.18.20:
    resolution: {integrity: sha512-/5bHkMWnq1EgKr1V+Ybz3s1hWXok7mDFUMQ4cG10AfW3wL02PSZi5kFpYKrptDsgb2WAJIvRcDm+qIvXf/apvg==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-ia32@0.18.20:
    resolution: {integrity: sha512-P4etWwq6IsReT0E1KHU40bOnzMHoH73aXp96Fs8TIT6z9Hu8G6+0SHSw9i2isWrD2nbx2qo5yUqACgdfVGx7TA==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-loong64@0.18.20:
    resolution: {integrity: sha512-nXW8nqBTrOpDLPgPY9uV+/1DjxoQ7DoB2N8eocyq8I9XuqJ7BiAMDMf9n1xZM9TgW0J8zrquIb/A7s3BJv7rjg==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-mips64el@0.18.20:
    resolution: {integrity: sha512-d5NeaXZcHp8PzYy5VnXV3VSd2D328Zb+9dEq5HE6bw6+N86JVPExrA6O68OPwobntbNJ0pzCpUFZTo3w0GyetQ==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-ppc64@0.18.20:
    resolution: {integrity: sha512-WHPyeScRNcmANnLQkq6AfyXRFr5D6N2sKgkFo2FqguP44Nw2eyDlbTdZwd9GYk98DZG9QItIiTlFLHJHjxP3FA==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-riscv64@0.18.20:
    resolution: {integrity: sha512-WSxo6h5ecI5XH34KC7w5veNnKkju3zBRLEQNY7mv5mtBmrP/MjNBCAlsM2u5hDBlS3NGcTQpoBvRzqBcRtpq1A==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-s390x@0.18.20:
    resolution: {integrity: sha512-+8231GMs3mAEth6Ja1iK0a1sQ3ohfcpzpRLH8uuc5/KVDFneH6jtAJLFGafpzpMRO6DzJ6AvXKze9LfFMrIHVQ==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/linux-x64@0.18.20:
    resolution: {integrity: sha512-UYqiqemphJcNsFEskc73jQ7B9jgwjWrSayxawS6UVFZGWrAAtkzjxSqnoclCXxWtfwLdzU+vTpcNYhpn43uP1w==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/netbsd-x64@0.18.20:
    resolution: {integrity: sha512-iO1c++VP6xUBUmltHZoMtCUdPlnPGdBom6IrO4gyKPFFVBKioIImVooR5I83nTew5UOYrk3gIJhbZh8X44y06A==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/openbsd-x64@0.18.20:
    resolution: {integrity: sha512-e5e4YSsuQfX4cxcygw/UCPIEP6wbIL+se3sxPdCiMbFLBWu0eiZOJ7WoD+ptCLrmjZBK1Wk7I6D/I3NglUGOxg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/sunos-x64@0.18.20:
    resolution: {integrity: sha512-kDbFRFp0YpTQVVrqUd5FTYmWo45zGaXe0X8E1G/LKFC0v8x0vWrhOWSLITcCn63lmZIxfOMXtCfti/RxN/0wnQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/win32-arm64@0.18.20:
    resolution: {integrity: sha512-ddYFR6ItYgoaq4v4JmQQaAI5s7npztfV4Ag6NrhiaW0RrnOXqBkgwZLofVTlq1daVTQNhtI5oieTvkRPfZrePg==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/win32-ia32@0.18.20:
    resolution: {integrity: sha512-Wv7QBi3ID/rROT08SABTS7eV4hX26sVduqDOTe1MvGMjNd3EjOz4b7zeexIR62GTIEKrfJXKL9LFxTYgkyeu7g==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@esbuild/win32-x64@0.18.20:
    resolution: {integrity: sha512-kTdfRcSiDfQca/y9QIkng02avJ+NCaQvrMejlsB3RRv5sE9rRoeBPISaZpKxHELzRxZyLvNts1P27W3wV+8geQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]
    requiresBuild: true
    dev: true
    optional: true

  /@jridgewell/gen-mapping@0.3.3:
    resolution: {integrity: sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==}
    engines: {node: '>=6.0.0'}
    dependencies:
      '@jridgewell/set-array': 1.1.2
      '@jridgewell/sourcemap-codec': 1.4.15
      '@jridgewell/trace-mapping': 0.3.22
    dev: true

  /@jridgewell/resolve-uri@3.1.2:
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}
    dev: true

  /@jridgewell/set-array@1.1.2:
    resolution: {integrity: sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==}
    engines: {node: '>=6.0.0'}
    dev: true

  /@jridgewell/sourcemap-codec@1.4.15:
    resolution: {integrity: sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==}
    dev: true

  /@jridgewell/trace-mapping@0.3.22:
    resolution: {integrity: sha512-Wf963MzWtA2sjrNt+g18IAln9lKnlRp+K2eH4jjIoF1wYeq3aMREpG09xhlhdzS0EjwU7qmUJYangWa+151vZw==}
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.4.15
    dev: true

  /@mediapipe/tasks-vision@0.10.8:
    resolution: {integrity: sha512-Rp7ll8BHrKB3wXaRFKhrltwZl1CiXGdibPxuWXvqGnKTnv8fqa/nvftYNuSbf+pbJWKYCXdBtYTITdAUTGGh0Q==}
    dev: false

  /@react-spring/animated@9.6.1(react@18.2.0):
    resolution: {integrity: sha512-ls/rJBrAqiAYozjLo5EPPLLOb1LM0lNVQcXODTC1SMtS6DbuBCPaKco5svFUQFMP2dso3O+qcC4k9FsKc0KxMQ==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    dependencies:
      '@react-spring/shared': 9.6.1(react@18.2.0)
      '@react-spring/types': 9.6.1
      react: 18.2.0
    dev: false

  /@react-spring/core@9.6.1(react@18.2.0):
    resolution: {integrity: sha512-3HAAinAyCPessyQNNXe5W0OHzRfa8Yo5P748paPcmMowZ/4sMfaZ2ZB6e5x5khQI8NusOHj8nquoutd6FRY5WQ==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    dependencies:
      '@react-spring/animated': 9.6.1(react@18.2.0)
      '@react-spring/rafz': 9.6.1
      '@react-spring/shared': 9.6.1(react@18.2.0)
      '@react-spring/types': 9.6.1
      react: 18.2.0
    dev: false

  /@react-spring/rafz@9.6.1:
    resolution: {integrity: sha512-v6qbgNRpztJFFfSE3e2W1Uz+g8KnIBs6SmzCzcVVF61GdGfGOuBrbjIcp+nUz301awVmREKi4eMQb2Ab2gGgyQ==}
    dev: false

  /@react-spring/shared@9.6.1(react@18.2.0):
    resolution: {integrity: sha512-PBFBXabxFEuF8enNLkVqMC9h5uLRBo6GQhRMQT/nRTnemVENimgRd+0ZT4yFnAQ0AxWNiJfX3qux+bW2LbG6Bw==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    dependencies:
      '@react-spring/rafz': 9.6.1
      '@react-spring/types': 9.6.1
      react: 18.2.0
    dev: false

  /@react-spring/three@9.6.1(@react-three/fiber@8.15.16)(react@18.2.0)(three@0.158.0):
    resolution: {integrity: sha512-Tyw2YhZPKJAX3t2FcqvpLRb71CyTe1GvT3V+i+xJzfALgpk10uPGdGaQQ5Xrzmok1340DAeg2pR/MCfaW7b8AA==}
    peerDependencies:
      '@react-three/fiber': '>=6.0'
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
      three: '>=0.126'
    dependencies:
      '@react-spring/animated': 9.6.1(react@18.2.0)
      '@react-spring/core': 9.6.1(react@18.2.0)
      '@react-spring/shared': 9.6.1(react@18.2.0)
      '@react-spring/types': 9.6.1
      '@react-three/fiber': 8.15.16(react-dom@18.2.0)(react@18.2.0)(three@0.158.0)
      react: 18.2.0
      three: 0.158.0
    dev: false

  /@react-spring/types@9.6.1:
    resolution: {integrity: sha512-POu8Mk0hIU3lRXB3bGIGe4VHIwwDsQyoD1F394OK7STTiX9w4dG3cTLljjYswkQN+hDSHRrj4O36kuVa7KPU8Q==}
    dev: false

  /@react-three/drei@9.99.0(@react-three/fiber@8.15.16)(@types/react@18.2.57)(@types/three@0.158.3)(react-dom@18.2.0)(react@18.2.0)(three@0.158.0):
    resolution: {integrity: sha512-F4Oyxn+t+7R+kA+NGuK2izog1KkwH7KmEBd6aTYTex43YDRY5AFXfCDoiD9SOU6jliQRW2Vx2qw/YHfPBYMUwA==}
    peerDependencies:
      '@react-three/fiber': '>=8.0'
      react: '>=18.0'
      react-dom: '>=18.0'
      three: '>=0.137'
    peerDependenciesMeta:
      react-dom:
        optional: true
    dependencies:
      '@babel/runtime': 7.23.9
      '@mediapipe/tasks-vision': 0.10.8
      '@react-spring/three': 9.6.1(@react-three/fiber@8.15.16)(react@18.2.0)(three@0.158.0)
      '@react-three/fiber': 8.15.16(react-dom@18.2.0)(react@18.2.0)(three@0.158.0)
      '@use-gesture/react': 10.3.0(react@18.2.0)
      camera-controls: 2.8.3(three@0.158.0)
      cross-env: 7.0.3
      detect-gpu: 5.0.38
      glsl-noise: 0.0.0
      maath: 0.10.7(@types/three@0.158.3)(three@0.158.0)
      meshline: 3.2.0(three@0.158.0)
      react: 18.2.0
      react-composer: 5.0.3(react@18.2.0)
      react-dom: 18.2.0(react@18.2.0)
      react-merge-refs: 1.1.0
      stats-gl: 2.0.1
      stats.js: 0.17.0
      suspend-react: 0.1.3(react@18.2.0)
      three: 0.158.0
      three-mesh-bvh: 0.7.2(three@0.158.0)
      three-stdlib: 2.29.4(three@0.158.0)
      troika-three-text: 0.49.0(three@0.158.0)
      tunnel-rat: 0.1.2(@types/react@18.2.57)(react@18.2.0)
      utility-types: 3.11.0
      uuid: 9.0.1
      zustand: 3.7.2(react@18.2.0)
    transitivePeerDependencies:
      - '@types/react'
      - '@types/three'
      - immer
    dev: false

  /@react-three/fiber@8.15.16(react-dom@18.2.0)(react@18.2.0)(three@0.158.0):
    resolution: {integrity: sha512-4f47K9e2mP8W/guNtu3e2J/Nt6GwKTsX/YP2dktPZRcpHYEsqfXCO8kSfvVMb+lQ8wR0HoFzggqdnGuhZaui0g==}
    peerDependencies:
      expo: '>=43.0'
      expo-asset: '>=8.4'
      expo-file-system: '>=11.0'
      expo-gl: '>=11.0'
      react: '>=18.0'
      react-dom: '>=18.0'
      react-native: '>=0.64'
      three: '>=0.133'
    peerDependenciesMeta:
      expo:
        optional: true
      expo-asset:
        optional: true
      expo-file-system:
        optional: true
      expo-gl:
        optional: true
      react-dom:
        optional: true
      react-native:
        optional: true
    dependencies:
      '@babel/runtime': 7.23.9
      '@types/react-reconciler': 0.26.7
      '@types/webxr': 0.5.14
      base64-js: 1.5.1
      buffer: 6.0.3
      its-fine: 1.1.1(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
      react-reconciler: 0.27.0(react@18.2.0)
      react-use-measure: 2.1.1(react-dom@18.2.0)(react@18.2.0)
      scheduler: 0.21.0
      suspend-react: 0.1.3(react@18.2.0)
      three: 0.158.0
      zustand: 3.7.2(react@18.2.0)
    dev: false

  /@rollup/pluginutils@5.1.0:
    resolution: {integrity: sha512-XTIWOPPcpvyKI6L1NHo0lFlCyznUEyPmPY1mc3KpPVDYulHSTvyeLNVW00QTLIAFNhR3kYnJTQHeGqU4M3n09g==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      rollup: ^1.20.0||^2.0.0||^3.0.0||^4.0.0
    peerDependenciesMeta:
      rollup:
        optional: true
    dependencies:
      '@types/estree': 1.0.5
      estree-walker: 2.0.2
      picomatch: 2.3.1
    dev: true

  /@types/babel__core@7.20.5:
    resolution: {integrity: sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==}
    dependencies:
      '@babel/parser': 7.23.9
      '@babel/types': 7.23.9
      '@types/babel__generator': 7.6.8
      '@types/babel__template': 7.4.4
      '@types/babel__traverse': 7.20.5
    dev: true

  /@types/babel__generator@7.6.8:
    resolution: {integrity: sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==}
    dependencies:
      '@babel/types': 7.23.9
    dev: true

  /@types/babel__template@7.4.4:
    resolution: {integrity: sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==}
    dependencies:
      '@babel/parser': 7.23.9
      '@babel/types': 7.23.9
    dev: true

  /@types/babel__traverse@7.20.5:
    resolution: {integrity: sha512-WXCyOcRtH37HAUkpXhUduaxdm82b4GSlyTqajXviN4EfiuPgNYR109xMCKvpl6zPIpua0DGlMEDCq+g8EdoheQ==}
    dependencies:
      '@babel/types': 7.23.9
    dev: true

  /@types/draco3d@1.4.9:
    resolution: {integrity: sha512-4MMUjMQb4yA5fJ4osXx+QxGHt0/ZSy4spT6jL1HM7Tn8OJEC35siqdnpOo+HxPhYjqEFumKfGVF9hJfdyKBIBA==}
    dev: false

  /@types/estree@1.0.5:
    resolution: {integrity: sha512-/kYRxGDLWzHOB7q+wtSUQlFrtcdUccpfy+X+9iMBpHK8QLLhx2wIPYuS5DYtR9Wa/YlZAbIovy7qVdB1Aq6Lyw==}
    dev: true

  /@types/offscreencanvas@2019.7.3:
    resolution: {integrity: sha512-ieXiYmgSRXUDeOntE1InxjWyvEelZGP63M+cGuquuRLuIKKT1osnkXjxev9B7d1nXSug5vpunx+gNlbVxMlC9A==}
    dev: false

  /@types/prop-types@15.7.11:
    resolution: {integrity: sha512-ga8y9v9uyeiLdpKddhxYQkxNDrfvuPrlFb0N1qnZZByvcElJaXthF1UhvCh9TLWJBEHeNtdnbysW7Y6Uq8CVng==}

  /@types/react-dom@18.2.19:
    resolution: {integrity: sha512-aZvQL6uUbIJpjZk4U8JZGbau9KDeAwMfmhyWorxgBkqDIEf6ROjRozcmPIicqsUwPUjbkDfHKgGee1Lq65APcA==}
    dependencies:
      '@types/react': 18.2.57
    dev: true

  /@types/react-reconciler@0.26.7:
    resolution: {integrity: sha512-mBDYl8x+oyPX/VBb3E638N0B7xG+SPk/EAMcVPeexqus/5aTpTphQi0curhhshOqRrc9t6OPoJfEUkbymse/lQ==}
    dependencies:
      '@types/react': 18.2.57
    dev: false

  /@types/react-reconciler@0.28.8:
    resolution: {integrity: sha512-SN9c4kxXZonFhbX4hJrZy37yw9e7EIxcpHCxQv5JUS18wDE5ovkQKlqQEkufdJCCMfuI9BnjUJvhYeJ9x5Ra7g==}
    dependencies:
      '@types/react': 18.2.57
    dev: false

  /@types/react@18.2.57:
    resolution: {integrity: sha512-ZvQsktJgSYrQiMirAN60y4O/LRevIV8hUzSOSNB6gfR3/o3wCBFQx3sPwIYtuDMeiVgsSS3UzCV26tEzgnfvQw==}
    dependencies:
      '@types/prop-types': 15.7.11
      '@types/scheduler': 0.16.8
      csstype: 3.1.3

  /@types/scheduler@0.16.8:
    resolution: {integrity: sha512-WZLiwShhwLRmeV6zH+GkbOFT6Z6VklCItrDioxUnv+u4Ll+8vKeFySoFyK/0ctcRpOmwAicELfmys1sDc/Rw+A==}

  /@types/stats.js@0.17.3:
    resolution: {integrity: sha512-pXNfAD3KHOdif9EQXZ9deK82HVNaXP5ZIF5RP2QG6OQFNTaY2YIetfrE9t528vEreGQvEPRDDc8muaoYeK0SxQ==}

  /@types/three@0.158.3:
    resolution: {integrity: sha512-6Qs1rUvLSbkJ4hlIe6/rdwIf61j1x2UKvGJg7s8KjswYsz1C1qDTs6voVXXB8kYaI0hgklgZgbZUupfL1l9xdA==}
    dependencies:
      '@types/stats.js': 0.17.3
      '@types/webxr': 0.5.14
      fflate: 0.6.10
      meshoptimizer: 0.18.1

  /@types/webxr@0.5.14:
    resolution: {integrity: sha512-UEMMm/Xn3DtEa+gpzUrOcDj+SJS1tk5YodjwOxcqStNhCfPcwgyC5Srg2ToVKyg2Fhq16Ffpb0UWUQHqoT9AMA==}

  /@use-gesture/core@10.3.0:
    resolution: {integrity: sha512-rh+6MND31zfHcy9VU3dOZCqGY511lvGcfyJenN4cWZe0u1BH6brBpBddLVXhF2r4BMqWbvxfsbL7D287thJU2A==}
    dev: false

  /@use-gesture/react@10.3.0(react@18.2.0):
    resolution: {integrity: sha512-3zc+Ve99z4usVP6l9knYVbVnZgfqhKah7sIG+PS2w+vpig2v2OLct05vs+ZXMzwxdNCMka8B+8WlOo0z6Pn6DA==}
    peerDependencies:
      react: '>= 16.8.0'
    dependencies:
      '@use-gesture/core': 10.3.0
      react: 18.2.0
    dev: false

  /@vitejs/plugin-react@4.2.1(vite@4.5.2):
    resolution: {integrity: sha512-oojO9IDc4nCUUi8qIR11KoQm0XFFLIwsRBwHRR4d/88IWghn1y6ckz/bJ8GHDCsYEJee8mDzqtJxh15/cisJNQ==}
    engines: {node: ^14.18.0 || >=16.0.0}
    peerDependencies:
      vite: ^4.2.0 || ^5.0.0
    dependencies:
      '@babel/core': 7.23.9
      '@babel/plugin-transform-react-jsx-self': 7.23.3(@babel/core@7.23.9)
      '@babel/plugin-transform-react-jsx-source': 7.23.3(@babel/core@7.23.9)
      '@types/babel__core': 7.20.5
      react-refresh: 0.14.0
      vite: 4.5.2
    transitivePeerDependencies:
      - supports-color
    dev: true

  /ansi-styles@3.2.1:
    resolution: {integrity: sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==}
    engines: {node: '>=4'}
    dependencies:
      color-convert: 1.9.3
    dev: true

  /base64-js@1.5.1:
    resolution: {integrity: sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==}
    dev: false

  /bidi-js@1.0.3:
    resolution: {integrity: sha512-RKshQI1R3YQ+n9YJz2QQ147P66ELpa1FQEg20Dk8oW9t2KgLbpDLLp9aGZ7y8WHSshDknG0bknqGw5/tyCs5tw==}
    dependencies:
      require-from-string: 2.0.2
    dev: false

  /browserslist@4.23.0:
    resolution: {integrity: sha512-QW8HiM1shhT2GuzkvklfjcKDiWFXHOeFCIA/huJPwHsslwcydgk7X+z2zXpEijP98UCY7HbubZt5J2Zgvf0CaQ==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true
    dependencies:
      caniuse-lite: 1.0.30001588
      electron-to-chromium: 1.4.676
      node-releases: 2.0.14
      update-browserslist-db: 1.0.13(browserslist@4.23.0)
    dev: true

  /buffer@6.0.3:
    resolution: {integrity: sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==}
    dependencies:
      base64-js: 1.5.1
      ieee754: 1.2.1
    dev: false

  /camera-controls@2.8.3(three@0.158.0):
    resolution: {integrity: sha512-zFjqUR6onLkG+z1A6vAWfzovxZxWVSvp6e5t3lfZgfgPZtX3n74aykNAUaoRbq8Y3tOxadHkDjbfGDOP9hFf2w==}
    peerDependencies:
      three: '>=0.126.1'
    dependencies:
      three: 0.158.0
    dev: false

  /caniuse-lite@1.0.30001588:
    resolution: {integrity: sha512-+hVY9jE44uKLkH0SrUTqxjxqNTOWHsbnQDIKjwkZ3lNTzUUVdBLBGXtj/q5Mp5u98r3droaZAewQuEDzjQdZlQ==}
    dev: true

  /chalk@2.4.2:
    resolution: {integrity: sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==}
    engines: {node: '>=4'}
    dependencies:
      ansi-styles: 3.2.1
      escape-string-regexp: 1.0.5
      supports-color: 5.5.0
    dev: true

  /color-convert@1.9.3:
    resolution: {integrity: sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==}
    dependencies:
      color-name: 1.1.3
    dev: true

  /color-name@1.1.3:
    resolution: {integrity: sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==}
    dev: true

  /convert-source-map@2.0.0:
    resolution: {integrity: sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==}
    dev: true

  /cross-env@7.0.3:
    resolution: {integrity: sha512-+/HKd6EgcQCJGh2PSjZuUitQBQynKor4wrFbRg4DtAgS1aWO+gU52xpH7M9ScGgXSYmAVS9bIJ8EzuaGw0oNAw==}
    engines: {node: '>=10.14', npm: '>=6', yarn: '>=1'}
    hasBin: true
    dependencies:
      cross-spawn: 7.0.3
    dev: false

  /cross-spawn@7.0.3:
    resolution: {integrity: sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==}
    engines: {node: '>= 8'}
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2
    dev: false

  /csstype@3.1.3:
    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}

  /debounce@1.2.1:
    resolution: {integrity: sha512-XRRe6Glud4rd/ZGQfiV1ruXSfbvfJedlV9Y6zOlP+2K04vBYiJEte6stfFkCP03aMnY5tsipamumUjL14fofug==}
    dev: false

  /debug@4.3.4:
    resolution: {integrity: sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true
    dependencies:
      ms: 2.1.2
    dev: true

  /detect-gpu@5.0.38:
    resolution: {integrity: sha512-36QeGHSXYcJ/RfrnPEScR8GDprbXFG4ZhXsfVNVHztZr38+fRxgHnJl3CjYXXjbeRUhu3ZZBJh6Lg0A9v0Qd8A==}
    dependencies:
      webgl-constants: 1.1.1
    dev: false

  /draco3d@1.5.7:
    resolution: {integrity: sha512-m6WCKt/erDXcw+70IJXnG7M3awwQPAsZvJGX5zY7beBqpELw6RDGkYVU0W43AFxye4pDZ5i2Lbyc/NNGqwjUVQ==}
    dev: false

  /electron-to-chromium@1.4.676:
    resolution: {integrity: sha512-uHt4FB8SeYdhcOsj2ix/C39S7sPSNFJpzShjxGOm1KdF4MHyGqGi389+T5cErsodsijojXilYaHIKKqJfqh7uQ==}
    dev: true

  /esbuild@0.18.20:
    resolution: {integrity: sha512-ceqxoedUrcayh7Y7ZX6NdbbDzGROiyVBgC4PriJThBKSVPWnnFHZAkfI1lJT8QFkOwH4qOS2SJkS4wvpGl8BpA==}
    engines: {node: '>=12'}
    hasBin: true
    requiresBuild: true
    optionalDependencies:
      '@esbuild/android-arm': 0.18.20
      '@esbuild/android-arm64': 0.18.20
      '@esbuild/android-x64': 0.18.20
      '@esbuild/darwin-arm64': 0.18.20
      '@esbuild/darwin-x64': 0.18.20
      '@esbuild/freebsd-arm64': 0.18.20
      '@esbuild/freebsd-x64': 0.18.20
      '@esbuild/linux-arm': 0.18.20
      '@esbuild/linux-arm64': 0.18.20
      '@esbuild/linux-ia32': 0.18.20
      '@esbuild/linux-loong64': 0.18.20
      '@esbuild/linux-mips64el': 0.18.20
      '@esbuild/linux-ppc64': 0.18.20
      '@esbuild/linux-riscv64': 0.18.20
      '@esbuild/linux-s390x': 0.18.20
      '@esbuild/linux-x64': 0.18.20
      '@esbuild/netbsd-x64': 0.18.20
      '@esbuild/openbsd-x64': 0.18.20
      '@esbuild/sunos-x64': 0.18.20
      '@esbuild/win32-arm64': 0.18.20
      '@esbuild/win32-ia32': 0.18.20
      '@esbuild/win32-x64': 0.18.20
    dev: true

  /escalade@3.1.2:
    resolution: {integrity: sha512-ErCHMCae19vR8vQGe50xIsVomy19rg6gFu3+r3jkEO46suLMWBksvVyoGgQV+jOfl84ZSOSlmv6Gxa89PmTGmA==}
    engines: {node: '>=6'}
    dev: true

  /escape-string-regexp@1.0.5:
    resolution: {integrity: sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==}
    engines: {node: '>=0.8.0'}
    dev: true

  /estree-walker@2.0.2:
    resolution: {integrity: sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==}
    dev: true

  /fflate@0.6.10:
    resolution: {integrity: sha512-IQrh3lEPM93wVCEczc9SaAOvkmcoQn/G8Bo1e8ZPlY3X3bnAxWaBdvTdvM1hP62iZp0BXWDy4vTAy4fF0+Dlpg==}

  /fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]
    requiresBuild: true
    dev: true
    optional: true

  /gensync@1.0.0-beta.2:
    resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
    engines: {node: '>=6.9.0'}
    dev: true

  /globals@11.12.0:
    resolution: {integrity: sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==}
    engines: {node: '>=4'}
    dev: true

  /glsl-noise@0.0.0:
    resolution: {integrity: sha512-b/ZCF6amfAUb7dJM/MxRs7AetQEahYzJ8PtgfrmEdtw6uyGOr+ZSGtgjFm6mfsBkxJ4d2W7kg+Nlqzqvn3Bc0w==}
    dev: false

  /gsap@3.12.5:
    resolution: {integrity: sha512-srBfnk4n+Oe/ZnMIOXt3gT605BX9x5+rh/prT2F1SsNJsU1XuMiP0E2aptW481OnonOGACZWBqseH5Z7csHxhQ==}
    dev: false

  /has-flag@3.0.0:
    resolution: {integrity: sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==}
    engines: {node: '>=4'}
    dev: true

  /ieee754@1.2.1:
    resolution: {integrity: sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==}
    dev: false

  /isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}
    dev: false

  /its-fine@1.1.1(react@18.2.0):
    resolution: {integrity: sha512-v1Ia1xl20KbuSGlwoaGsW0oxsw8Be+TrXweidxD9oT/1lAh6O3K3/GIM95Tt6WCiv6W+h2M7RB1TwdoAjQyyKw==}
    peerDependencies:
      react: '>=18.0'
    dependencies:
      '@types/react-reconciler': 0.28.8
      react: 18.2.0
    dev: false

  /js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  /jsesc@2.5.2:
    resolution: {integrity: sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==}
    engines: {node: '>=4'}
    hasBin: true
    dev: true

  /json5@2.2.3:
    resolution: {integrity: sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==}
    engines: {node: '>=6'}
    hasBin: true
    dev: true

  /loose-envify@1.4.0:
    resolution: {integrity: sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==}
    hasBin: true
    dependencies:
      js-tokens: 4.0.0
    dev: false

  /lru-cache@5.1.1:
    resolution: {integrity: sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==}
    dependencies:
      yallist: 3.1.1
    dev: true

  /maath@0.10.7(@types/three@0.158.3)(three@0.158.0):
    resolution: {integrity: sha512-zQ2xd7dNOIVTjAS+hj22fyj1EFYmOJX6tzKjZ92r6WDoq8hyFxjuGA2q950tmR4iC/EKXoMQdSipkaJVuUHDTg==}
    peerDependencies:
      '@types/three': '>=0.144.0'
      three: '>=0.144.0'
    dependencies:
      '@types/three': 0.158.3
      three: 0.158.0
    dev: false

  /meshline@3.2.0(three@0.158.0):
    resolution: {integrity: sha512-ZaJkC967GTuef7UBdO0rGPX544oIWaNo7tYedVHSoR2lje6RR16fX8IsgMxgxoYYERtjqsRWIYBSPBxG4QR84Q==}
    peerDependencies:
      three: '>=0.137'
    dependencies:
      three: 0.158.0
    dev: false

  /meshoptimizer@0.18.1:
    resolution: {integrity: sha512-ZhoIoL7TNV4s5B6+rx5mC//fw8/POGyNxS/DZyCJeiZ12ScLfVwRE/GfsxwiTkMYYD5DmK2/JXnEVXqL4rF+Sw==}

  /ms@2.1.2:
    resolution: {integrity: sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==}
    dev: true

  /nanoid@3.3.7:
    resolution: {integrity: sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true
    dev: true

  /node-releases@2.0.14:
    resolution: {integrity: sha512-y10wOWt8yZpqXmOgRo77WaHEmhYQYGNA6y421PKsKYWEK8aW+cqAphborZDhqfyKrbZEN92CN1X2KbafY2s7Yw==}
    dev: true

  /object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}
    dev: false

  /path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}
    dev: false

  /picocolors@1.0.0:
    resolution: {integrity: sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==}
    dev: true

  /picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}
    dev: true

  /postcss@8.4.35:
    resolution: {integrity: sha512-u5U8qYpBCpN13BsiEB0CbR1Hhh4Gc0zLFuedrHJKMctHCHAGrMdG0PRM/KErzAL3CU6/eckEtmHNB3x6e3c0vA==}
    engines: {node: ^10 || ^12 || >=14}
    dependencies:
      nanoid: 3.3.7
      picocolors: 1.0.0
      source-map-js: 1.0.2
    dev: true

  /potpack@1.0.2:
    resolution: {integrity: sha512-choctRBIV9EMT9WGAZHn3V7t0Z2pMQyl0EZE6pFc/6ml3ssw7Dlf/oAOvFwjm1HVsqfQN8GfeFyJ+d8tRzqueQ==}
    dev: false

  /prop-types@15.8.1:
    resolution: {integrity: sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==}
    dependencies:
      loose-envify: 1.4.0
      object-assign: 4.1.1
      react-is: 16.13.1
    dev: false

  /react-composer@5.0.3(react@18.2.0):
    resolution: {integrity: sha512-1uWd07EME6XZvMfapwZmc7NgCZqDemcvicRi3wMJzXsQLvZ3L7fTHVyPy1bZdnWXM4iPjYuNE+uJ41MLKeTtnA==}
    peerDependencies:
      react: ^15.0.0 || ^16.0.0 || ^17.0.0 || ^18.0.0
    dependencies:
      prop-types: 15.8.1
      react: 18.2.0
    dev: false

  /react-dom@18.2.0(react@18.2.0):
    resolution: {integrity: sha512-6IMTriUmvsjHUjNtEDudZfuDQUoWXVxKHhlEGSk81n4YFS+r/Kl99wXiwlVXtPBtJenozv2P+hxDsw9eA7Xo6g==}
    peerDependencies:
      react: ^18.2.0
    dependencies:
      loose-envify: 1.4.0
      react: 18.2.0
      scheduler: 0.23.0
    dev: false

  /react-is@16.13.1:
    resolution: {integrity: sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==}
    dev: false

  /react-merge-refs@1.1.0:
    resolution: {integrity: sha512-alTKsjEL0dKH/ru1Iyn7vliS2QRcBp9zZPGoWxUOvRGWPUYgjo+V01is7p04It6KhgrzhJGnIj9GgX8W4bZoCQ==}
    dev: false

  /react-reconciler@0.27.0(react@18.2.0):
    resolution: {integrity: sha512-HmMDKciQjYmBRGuuhIaKA1ba/7a+UsM5FzOZsMO2JYHt9Jh8reCb7j1eDC95NOyUlKM9KRyvdx0flBuDvYSBoA==}
    engines: {node: '>=0.10.0'}
    peerDependencies:
      react: ^18.0.0
    dependencies:
      loose-envify: 1.4.0
      react: 18.2.0
      scheduler: 0.21.0
    dev: false

  /react-refresh@0.14.0:
    resolution: {integrity: sha512-wViHqhAd8OHeLS/IRMJjTSDHF3U9eWi62F/MledQGPdJGDhodXJ9PBLNGr6WWL7qlH12Mt3TyTpbS+hGXMjCzQ==}
    engines: {node: '>=0.10.0'}
    dev: true

  /react-use-measure@2.1.1(react-dom@18.2.0)(react@18.2.0):
    resolution: {integrity: sha512-nocZhN26cproIiIduswYpV5y5lQpSQS1y/4KuvUCjSKmw7ZWIS/+g3aFnX3WdBkyuGUtTLif3UTqnLLhbDoQig==}
    peerDependencies:
      react: '>=16.13'
      react-dom: '>=16.13'
    dependencies:
      debounce: 1.2.1
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    dev: false

  /react@18.2.0:
    resolution: {integrity: sha512-/3IjMdb2L9QbBdWiW5e3P2/npwMBaU9mHCSCUzNln0ZCYbcfTsGbTJrU/kGemdH2IWmB2ioZ+zkxtmq6g09fGQ==}
    engines: {node: '>=0.10.0'}
    dependencies:
      loose-envify: 1.4.0
    dev: false

  /regenerator-runtime@0.14.1:
    resolution: {integrity: sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==}
    dev: false

  /require-from-string@2.0.2:
    resolution: {integrity: sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==}
    engines: {node: '>=0.10.0'}
    dev: false

  /rollup@3.29.4:
    resolution: {integrity: sha512-oWzmBZwvYrU0iJHtDmhsm662rC15FRXmcjCk1xD771dFDx5jJ02ufAQQTn0etB2emNk4J9EZg/yWKpsn9BWGRw==}
    engines: {node: '>=14.18.0', npm: '>=8.0.0'}
    hasBin: true
    optionalDependencies:
      fsevents: 2.3.3
    dev: true

  /scheduler@0.21.0:
    resolution: {integrity: sha512-1r87x5fz9MXqswA2ERLo0EbOAU74DpIUO090gIasYTqlVoJeMcl+Z1Rg7WHz+qtPujhS/hGIt9kxZOYBV3faRQ==}
    dependencies:
      loose-envify: 1.4.0
    dev: false

  /scheduler@0.23.0:
    resolution: {integrity: sha512-CtuThmgHNg7zIZWAXi3AsyIzA3n4xx7aNyjwC2VJldO2LMVDhFK+63xGqq6CsJH4rTAt6/M+N4GhZiDYPx9eUw==}
    dependencies:
      loose-envify: 1.4.0
    dev: false

  /semver@6.3.1:
    resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
    hasBin: true
    dev: true

  /shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}
    dependencies:
      shebang-regex: 3.0.0
    dev: false

  /shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}
    dev: false

  /source-map-js@1.0.2:
    resolution: {integrity: sha512-R0XvVJ9WusLiqTCEiGCmICCMplcCkIwwR11mOSD9CR5u+IXYdiseeEuXCVAjS54zqwkLcPNnmU4OeJ6tUrWhDw==}
    engines: {node: '>=0.10.0'}
    dev: true

  /stats-gl@2.0.1:
    resolution: {integrity: sha512-EhFm1AxoSBK3MflkFawZ4jmOX1dWu0nBAtCpvGxGsondEvCpsohbpRpM8pi8UAcxG5eRsDsCiRcxdH20j3Rp9A==}
    dev: false

  /stats.js@0.17.0:
    resolution: {integrity: sha512-hNKz8phvYLPEcRkeG1rsGmV5ChMjKDAWU7/OJJdDErPBNChQXxCo3WZurGpnWc6gZhAzEPFad1aVgyOANH1sMw==}
    dev: false

  /supports-color@5.5.0:
    resolution: {integrity: sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==}
    engines: {node: '>=4'}
    dependencies:
      has-flag: 3.0.0
    dev: true

  /suspend-react@0.1.3(react@18.2.0):
    resolution: {integrity: sha512-aqldKgX9aZqpoDp3e8/BZ8Dm7x1pJl+qI3ZKxDN0i/IQTWUwBx/ManmlVJ3wowqbno6c2bmiIfs+Um6LbsjJyQ==}
    peerDependencies:
      react: '>=17.0'
    dependencies:
      react: 18.2.0
    dev: false

  /three-mesh-bvh@0.7.2(three@0.158.0):
    resolution: {integrity: sha512-HKRGZDKIUwwjL2mApYIAN8AYA5WAfFvc50PY8TL/9aGWzrRN1WLfPKAvTjv35F8PdPZzTmzHotCvIMFEN9FUSw==}
    peerDependencies:
      three: '>= 0.151.0'
    dependencies:
      three: 0.158.0
    dev: false

  /three-stdlib@2.29.4(three@0.158.0):
    resolution: {integrity: sha512-XNzGCrz/uAk9XoLwd35eN7dQyI4ggXZTeqjcN034YdYBpBlNO9kmLHehl/0Nw9jCelblB7jla+unHAOIyLyV6Q==}
    peerDependencies:
      three: '>=0.128.0'
    dependencies:
      '@types/draco3d': 1.4.9
      '@types/offscreencanvas': 2019.7.3
      '@types/webxr': 0.5.14
      draco3d: 1.5.7
      fflate: 0.6.10
      potpack: 1.0.2
      three: 0.158.0
    dev: false

  /three@0.158.0:
    resolution: {integrity: sha512-TALj4EOpdDPF1henk2Q+s17K61uEAAWQ7TJB68nr7FKxqwyDr3msOt5IWdbGm4TaWKjrtWS8DJJWe9JnvsWOhQ==}
    dev: false

  /to-fast-properties@2.0.0:
    resolution: {integrity: sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==}
    engines: {node: '>=4'}
    dev: true

  /troika-three-text@0.49.0(three@0.158.0):
    resolution: {integrity: sha512-sn9BNC6eIX8OO3iAkPwjecJ7Pn21Ve8P1UNFMNeQzXx759rrqS4i4pSZs7FLMYdWyCKVXBFGimBySFwRKLjq/Q==}
    peerDependencies:
      three: '>=0.125.0'
    dependencies:
      bidi-js: 1.0.3
      three: 0.158.0
      troika-three-utils: 0.49.0(three@0.158.0)
      troika-worker-utils: 0.49.0
      webgl-sdf-generator: 1.1.1
    dev: false

  /troika-three-utils@0.49.0(three@0.158.0):
    resolution: {integrity: sha512-umitFL4cT+Fm/uONmaQEq4oZlyRHWwVClaS6ZrdcueRvwc2w+cpNQ47LlJKJswpqtMFWbEhOLy0TekmcPZOdYA==}
    peerDependencies:
      three: '>=0.125.0'
    dependencies:
      three: 0.158.0
    dev: false

  /troika-worker-utils@0.49.0:
    resolution: {integrity: sha512-1xZHoJrG0HFfCvT/iyN41DvI/nRykiBtHqFkGaGgJwq5iXfIZFBiPPEHFpPpgyKM3Oo5ITHXP5wM2TNQszYdVg==}
    dev: false

  /tunnel-rat@0.1.2(@types/react@18.2.57)(react@18.2.0):
    resolution: {integrity: sha512-lR5VHmkPhzdhrM092lI2nACsLO4QubF0/yoOhzX7c+wIpbN1GjHNzCc91QlpxBi+cnx8vVJ+Ur6vL5cEoQPFpQ==}
    dependencies:
      zustand: 4.5.1(@types/react@18.2.57)(react@18.2.0)
    transitivePeerDependencies:
      - '@types/react'
      - immer
      - react
    dev: false

  /typescript@5.3.3:
    resolution: {integrity: sha512-pXWcraxM0uxAS+tN0AG/BF2TyqmHO014Z070UsJ+pFvYuRSq8KH8DmWpnbXe0pEPDHXZV3FcAbJkijJ5oNEnWw==}
    engines: {node: '>=14.17'}
    hasBin: true
    dev: true

  /update-browserslist-db@1.0.13(browserslist@4.23.0):
    resolution: {integrity: sha512-xebP81SNcPuNpPP3uzeW1NYXxI3rxyJzF3pD6sH4jE7o/IX+WtSpwnVU+qIsDPyk0d3hmFQ7mjqc6AtV604hbg==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'
    dependencies:
      browserslist: 4.23.0
      escalade: 3.1.2
      picocolors: 1.0.0
    dev: true

  /use-sync-external-store@1.2.0(react@18.2.0):
    resolution: {integrity: sha512-eEgnFxGQ1Ife9bzYs6VLi8/4X6CObHMw9Qr9tPY43iKwsPw8xE8+EFsf/2cFZ5S3esXgpWgtSCtLNS41F+sKPA==}
    peerDependencies:
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    dependencies:
      react: 18.2.0
    dev: false

  /utility-types@3.11.0:
    resolution: {integrity: sha512-6Z7Ma2aVEWisaL6TvBCy7P8rm2LQoPv6dJ7ecIaIixHcwfbJ0x7mWdbcwlIM5IGQxPZSFYeqRCqlOOeKoJYMkw==}
    engines: {node: '>= 4'}
    dev: false

  /uuid@9.0.1:
    resolution: {integrity: sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==}
    hasBin: true
    dev: false

  /vite-plugin-glsl@1.2.1(vite@4.5.2):
    resolution: {integrity: sha512-yBpBHWfdiRVMxN3yIKx4qmwuqMwoMAnEMipVI0NbdIieyRFO8hpW8VTFHYi3W75h7CkvsotteP9C4pln51OE0A==}
    engines: {node: '>= 16.15.1', npm: '>= 8.11.0'}
    peerDependencies:
      vite: ^3.0.0 || ^4.0.0 || ^5.0.0
    dependencies:
      '@rollup/pluginutils': 5.1.0
      vite: 4.5.2
    transitivePeerDependencies:
      - rollup
    dev: true

  /vite@4.5.2:
    resolution: {integrity: sha512-tBCZBNSBbHQkaGyhGCDUGqeo2ph8Fstyp6FMSvTtsXeZSPpSMGlviAOav2hxVTqFcx8Hj/twtWKsMJXNY0xI8w==}
    engines: {node: ^14.18.0 || >=16.0.0}
    hasBin: true
    peerDependencies:
      '@types/node': '>= 14'
      less: '*'
      lightningcss: ^1.21.0
      sass: '*'
      stylus: '*'
      sugarss: '*'
      terser: ^5.4.0
    peerDependenciesMeta:
      '@types/node':
        optional: true
      less:
        optional: true
      lightningcss:
        optional: true
      sass:
        optional: true
      stylus:
        optional: true
      sugarss:
        optional: true
      terser:
        optional: true
    dependencies:
      esbuild: 0.18.20
      postcss: 8.4.35
      rollup: 3.29.4
    optionalDependencies:
      fsevents: 2.3.3
    dev: true

  /webgl-constants@1.1.1:
    resolution: {integrity: sha512-LkBXKjU5r9vAW7Gcu3T5u+5cvSvh5WwINdr0C+9jpzVB41cjQAP5ePArDtk/WHYdVj0GefCgM73BA7FlIiNtdg==}
    dev: false

  /webgl-sdf-generator@1.1.1:
    resolution: {integrity: sha512-9Z0JcMTFxeE+b2x1LJTdnaT8rT8aEp7MVxkNwoycNmJWwPdzoXzMh0BjJSh/AEFP+KPYZUli814h8bJZFIZ2jA==}
    dev: false

  /which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true
    dependencies:
      isexe: 2.0.0
    dev: false

  /yallist@3.1.1:
    resolution: {integrity: sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==}
    dev: true

  /zustand@3.7.2(react@18.2.0):
    resolution: {integrity: sha512-PIJDIZKtokhof+9+60cpockVOq05sJzHCriyvaLBmEJixseQ1a5Kdov6fWZfWOu5SK9c+FhH1jU0tntLxRJYMA==}
    engines: {node: '>=12.7.0'}
    peerDependencies:
      react: '>=16.8'
    peerDependenciesMeta:
      react:
        optional: true
    dependencies:
      react: 18.2.0
    dev: false

  /zustand@4.5.1(@types/react@18.2.57)(react@18.2.0):
    resolution: {integrity: sha512-XlauQmH64xXSC1qGYNv00ODaQ3B+tNPoy22jv2diYiP4eoDKr9LA+Bh5Bc3gplTrFdb6JVI+N4kc1DZ/tbtfPg==}
    engines: {node: '>=12.7.0'}
    peerDependencies:
      '@types/react': '>=16.8'
      immer: '>=9.0.6'
      react: '>=16.8'
    peerDependenciesMeta:
      '@types/react':
        optional: true
      immer:
        optional: true
      react:
        optional: true
    dependencies:
      '@types/react': 18.2.57
      react: 18.2.0
      use-sync-external-store: 1.2.0(react@18.2.0)
    dev: false


================================================================================
File: src/App.tsx
Size: 425 B
================================================================================

import { Canvas } from "@react-three/fiber";

import Scene from "./components/Scene";
import Text from "./components/Text";

const App = () => {
  return (
    <>
      {/* Three.js scene */}
      <Canvas id="webgl" camera={{ fov: 45, position: [0, 0, 10], near: 0.0001, far: 500 }}>
        <Scene />
      </Canvas>

      {/* HTML text that displays particle count */}
      <Text />
    </>
  );
};

export default App;


================================================================================
File: src/animations/index.ts
Size: 349 B
================================================================================

export { default as useOneParticle } from "./useOneParticle";
export { default as useLinePlaneAndCube } from "./useLinePlaneAndCube";
export { default as useSphereAndMath } from "./useSphereAndMath";
export { default as useImage } from "./useImage";
export { default as useHead } from "./useHead";
export { default as useGalaxy } from "./useGalaxy";

================================================================================
File: src/animations/useGalaxy/galaxyShaders.ts
Size: 2.36 kB
================================================================================

// use positions texture rendered by frame-buffer object (fbo)
// to use as current position for the particles 
export const vertexShader = `
  uniform sampler2D uPositionsTexture;
  uniform float uPointSize;

  void main() {
    vec2 locationOnTexture = position.xy;
    vec4 pos = texture2D(uPositionsTexture, locationOnTexture);
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(pos.xyz, 1.0);
    gl_PointSize = uPointSize;
  }
`;

export const fragmentShader = `
  void main() {
    vec3 color = vec3(1.0);
    gl_FragColor = vec4(color, 0.3);
  }
`;

// positions texture rendred by frame-buffer object (fbo)
// uses velocities texture to update itself
export const positionsVertexShader = `
  void main() {
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
  }
`;

export const positionsFragmentShader = `
  uniform sampler2D uPositionsTexture;
  uniform sampler2D uVelocitiesTexture;
  uniform vec2 uResolution;
  uniform float uDeltaTime;

  void main() {
    vec2 uv = gl_FragCoord.xy / uResolution;
    vec3 position = texture2D(uPositionsTexture, uv).rgb;
    vec4 velocity = texture2D(uVelocitiesTexture, uv).rgba;

    position += velocity.xyz * uDeltaTime;
    
    gl_FragColor = vec4(position, 1.0);
  }
`;

// velocities texture rendred by frame-buffer object (fbo)
// uses current positions texture to calculate velocity
export const velocitiesVertexShader = `
  void main() {
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
  }
`;

export const velocitiesFragmentShader = `
  uniform sampler2D uPositionsTexture;
  uniform sampler2D uVelocitiesTexture;
  uniform vec2 uResolution;
  uniform float uMass;
  uniform float uBlackholeMass;
  uniform float uG;
  uniform float uDeltaTime;
  uniform float uTime;

  void main() {
    vec2 uv = gl_FragCoord.xy / uResolution;
    vec3 position = texture2D(uPositionsTexture, uv).rgb;
    vec3 velocity = texture2D(uVelocitiesTexture, uv).rgb;
    
    vec3 distance = vec3(0.0) - position;
    float distanceSquared = clamp(dot(distance, distance), 100000.0, 1000000000000.0);
    vec3 force = uG * normalize(distance) * ((uBlackholeMass * uMass) / distanceSquared);
    
    vec3 acceleration = force / uMass;
    velocity += acceleration * uDeltaTime;

    gl_FragColor = vec4(velocity, 1.0);
  }
`;

================================================================================
File: src/animations/useGalaxy/index.ts
Size: 38 B
================================================================================

export { default } from "./useGalaxy";

================================================================================
File: src/animations/useGalaxy/useGalaxy.ts
Size: 5.88 kB
================================================================================

import { useFrame, useThree } from "@react-three/fiber";
import { useEffect, useState } from "react";
import * as THREE from "three";
import gsap from "gsap";

import { showParticleCount } from "../../utils";
import useStore, { Stage } from "../../store";
import * as shaders from "./galaxyShaders";

function useGalaxy() {
  const [isInitialized, setIsInitialized] = useState(false);
  const [initializingAttempts, setInitializingAttempts] = useState(0);
  const fbo = useStore(store => store.fboRef.current);
  const stage = useStore(store => store.stage);
  const particles = useStore(store => store.particlesRef.current);
  const camera = useThree(context => context.camera);
  
  useFrame(() => {
    if (stage !== Stage.Galaxy) return;

    // on each frame use the position texture rendered by the fbo for the positions
    const uPositionsTexture = fbo.positions.renderTarget?.texture;
    if (uPositionsTexture) {
      particles!.material.uniforms.uPositionsTexture.value = uPositionsTexture;
    };
  });
  
  useEffect(() => {
    if (!particles) return;
    if (isInitialized) return;
    if (stage !== Stage.Galaxy) return;

    // make sure everything is initialized
    if (!fbo.mesh) {
      setInitializingAttempts(state => state + 1);
      return;
    }
    
    const material = particles.material;
    const positionAttribute = particles.geometry.attributes.position;
    const velocityAttribute = particles.geometry.attributes.velocity;

    // draw 1,000,000 particles (out of 1,000,000)
    const WIDTH = 1000;
    const HEIGHT = 1000;
    const COUNT = WIDTH * HEIGHT;
    particles.geometry.setDrawRange(0, COUNT); // [start, count]

    // intialize the material for the galaxy scene
    material.uniforms.uPositionsTexture = { value: null };
    material.uniforms.uPointSize = { value: 1 };
    material.vertexShader = shaders.vertexShader;
    material.fragmentShader = shaders.fragmentShader;
    material.blending = THREE.AdditiveBlending;
    material.needsUpdate = true;

    const positionData = new Float32Array(COUNT * 4);
    const velocityData = new Float32Array(COUNT * 4);
    
    for (let i = 0; i < COUNT; i++) {
      const i3 = i * 3;
      const i4 = i * 4;
      // position of each pixel on the position texture
      // which will be used to get the actual position
      positionAttribute.array[i3 + 0] = (i % WIDTH) / WIDTH;
      positionAttribute.array[i3 + 1] = i / WIDTH / HEIGHT;
      positionAttribute.array[i3 + 2] = 0;
      velocityAttribute.array[i3 + 0] = 0;
      velocityAttribute.array[i3 + 1] = 0;
      velocityAttribute.array[i3 + 2] = 0;

      // initial position and velocity values for the texture
      // distribute the particles randomly on a circle, but make sure to do it uniformly
      // this prevents from having a high density of particles at the center of the circle
      const u = Math.random() + Math.random();
      const r = 600 * (u > 1 ? 2 - u : u);
      positionData[i4 + 0] = (Math.random() - 0.5) * r;
      positionData[i4 + 1] = (Math.random() - 0.5) * r;
      positionData[i4 + 2] = 0;
      positionData[i4 + 3] = 0;
      // initial velocity to nudge each a little
      const v = new THREE.Vector3(positionData[i4 + 0], positionData[i4 + 1])
        .normalize().applyAxisAngle(new THREE.Vector3(0, 0, 1), Math.PI / 2).multiplyScalar(0.5);
      velocityData[i4 + 0] = v.x;
      velocityData[i4 + 1] = v.y;
      velocityData[i4 + 2] = 0;
      velocityData[i4 + 3] = 0;
    }

    positionAttribute.needsUpdate = true;
    velocityAttribute.needsUpdate = true;
    
    // initialize fbo (frame-buffer object) to calculate positions and velocities on the gpu
    fbo.positions.vertexShader = shaders.positionsVertexShader;
    fbo.positions.fragmentShader = shaders.positionsFragmentShader;
    fbo.velocities.vertexShader = shaders.velocitiesVertexShader;
    fbo.velocities.fragmentShader = shaders.velocitiesFragmentShader;
    // use current positions and velocities as initial value for the fbo
    fbo.mesh!.material.uniforms.uPositionsTexture.value = new THREE.DataTexture(
      positionData,
      WIDTH, HEIGHT, THREE.RGBAFormat, THREE.FloatType
    );
    fbo.mesh!.material.uniforms.uPositionsTexture.value.needsUpdate = true;
    fbo.mesh!.material.uniforms.uVelocitiesTexture.value = new THREE.DataTexture(
      velocityData,
      WIDTH, HEIGHT, THREE.RGBAFormat, THREE.FloatType
    );
    fbo.mesh!.material.uniforms.uVelocitiesTexture.value.needsUpdate = true;


    // create gsap timeline for animations
    const timeline = gsap.timeline({ ease: "power1.inOut" });
    
    // reset previous camera and particles changes
    particles.rotation.set(0, 0, 0);
    particles.position.set(0, 0, 0);
    camera.rotation.set(0, 0, 0);
    camera.position.set(0, 0, -2);

    // update the particles count text
    const count = { value : 250000 };
    timeline.to(count, {
      value: COUNT,
      duration: 3,
      onUpdate() {
        showParticleCount(count.value);
      }
    });

    // move camera to far away
    timeline.to(camera.position, {
      z: 380,
      duration: 4,
      ease: "none"
    }, "<");

    // move camera back to begining
    timeline.to(camera.position, {
      z: 0,
      duration: 5,
      ease: "none"
    });

    // rotate the camera while moving towards the center
    timeline.to(camera.rotation, {
      z: -Math.PI * 2,
      duration: 15,
      ease: "none",
    }, "<");

    // fade out the particles count text
    timeline.to(".text", {
      opacity: 0,
      duration: 1.5,
      onComplete() {
        setTimeout(() => {
          const elm = document.createElement("div");
          elm.classList.add("msg")
          document.body.appendChild(elm);
        }, 10000);
      }
    }, "<3");
    
    setIsInitialized(true);
  }, [stage, isInitialized, initializingAttempts]);
}

export default useGalaxy;

================================================================================
File: src/animations/useHead/headShaders.ts
Size: 1.29 kB
================================================================================

import noise from "../../shaders/noise";

export const vertexShader = `
  attribute vec3 velocity;
  attribute vec3 aColor;
  attribute float aCurl;

  uniform float uScale;
  uniform float uPointSize;
  uniform float uTime;
  uniform float uProgressZ;
  uniform float uBlow;

  varying vec3 vPosition;
  varying vec3 vColor;

  ${noise}

  void main() {
    vec3 pos = position;

    pos *= uScale;

    // to get move the particles without looking stiff i apply
    // additional wavy movements with the curl noise
    pos -= curlNoise(pos * aCurl) * 0.1;

    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(pos, 1.0);
    gl_PointSize = uPointSize;
    vColor = aColor;
    vPosition = pos;
  }
`;

export const fragmentShader = `
  uniform float uProgressZ;
  uniform float uAlpha;

  varying vec3 vPosition;
  varying vec3 vColor;

  void main() {
    vec3 color = vec3(0.8, 0.8, 0.8);

    // reduce the brightness of the red and the blue colors
    color += step(0.9, vColor.b - vColor.r) * vec3(-0.25, -0.25, 0.1);       
    color += step(0.9, vColor.r - vColor.b) * vec3(0.1, -0.25, -0.25);  

    float alpha = vPosition.z - 0.5;
    alpha += uProgressZ;
    alpha = clamp(alpha, 0.0, 1.0);
    alpha *= uAlpha;

    gl_FragColor = vec4(color, alpha);
  }
`;

================================================================================
File: src/animations/useHead/index.ts
Size: 36 B
================================================================================

export { default } from "./useHead";

================================================================================
File: src/animations/useHead/useHead.tsx
Size: 12.9 kB
================================================================================

import { useEffect, useMemo, useRef, useState } from "react";
import { useFrame, useThree } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import gsap from "gsap";

import { fragmentShader, vertexShader } from "./headShaders";
import { lerp, showParticleCount } from "../../utils";
import useStore, { Stage } from "../../store";

import headModelPath from "../../../assets/head.gltf";

// preload the model, might not really be needed
useGLTF.preload(headModelPath);

function useHead() {
  const headModel = useGLTF(headModelPath);
  const reachedLips = useRef<boolean[]>(null!);
  const blowOutPositions = useRef<Float32Array>(null!);
  const isStageDone = useRef(false);
  const [headPositions, setHeadPositions] = useState<Float32Array>();
  const stage = useStore(store => store.stage);
  const setStage = useStore(store => store.setStage);
  const particles = useStore(store => store.particlesRef.current);
  const camera = useThree(context => context.camera);

  // position of where the mouth is
  const mouth = useMemo(() => new THREE.Vector3(0, -0.232, 0.24), []);

  // the blow animation
  // will run once the uBlow progress value is more than zero
  useFrame((_state, delta) => {
    if (!particles) return;
    if (!headPositions) return;
    if (stage !== Stage.Head) return;

    const uBlow = particles.material.uniforms.uBlow?.value;
    if (!uBlow) return;
    
    const count = 250_000;
    const positionAttribute = particles.geometry.attributes.position;
    const velocityAttribute = particles.geometry.attributes.velocity;
    const colorAttribute = particles.geometry.attributes.aColor;
    const curlAttribute = particles.geometry.attributes.aCurl;
    const headPositionsLength = headPositions.length / 3;
    const positions = positionAttribute.array;
    const velocities = velocityAttribute.array;
    const colors = colorAttribute.array;
    const curls = curlAttribute.array;
    // all of 250,000 particles are not used to form the head model
    // so i find the amount here, and i add them when the head blows particles to the current head particles
    const notInHeadYetCount = count - headPositionsLength;
    
    // temp vector used to calculate position
    // created here to avoid created a vector inside the loop for each particle
    // has slight performance improvements nonetheless
    const pos = new THREE.Vector3();
    // use force to move the particles which mean with acceleration and velocity
    const forces = new THREE.Vector3();
    
    for (let i = 0; i < count; i++) {
      const i3 = i * 3;
      pos.x = positions[i3 + 0];
      pos.y = positions[i3 + 1];
      pos.z = positions[i3 + 2];

      // if particle has reached the lips, blow it to the target position
      if (reachedLips.current[i]) {
        const targetX = blowOutPositions.current[i3 + 0];
        const targetY = blowOutPositions.current[i3 + 1];
        const targetZ = blowOutPositions.current[i3 + 2];
        const target = new THREE.Vector3(targetX, targetY, targetZ);
        // use linear interpolation to move the particle closer to the target position on each frame
        // instead of jumping there suddenly
        pos.lerp(target, 0.001);
        positions[i3 + 0] = pos.x;
        positions[i3 + 1] = pos.y;
        positions[i3 + 2] = pos.z;
        // add a bit of curliness to the movement with the curl noise
        curls[i] = lerp(curls[i], 2.5, 0.0025);
        continue;
      }

      // if this is particle is already blowed (passed the lips position) then skip to the next particle
      if (pos.z + 0.5 > uBlow) continue;

      // calculate the force that moves the particle to the lips
      forces.set(0, 0, 0);

      const force = mouth.clone().sub(pos);
      const length = force.length();
      // if pretty close to the mouth set that it has reached the mouth
      // so it will be blowed on the next frame
      if (length < 0.01) {
        if (!reachedLips.current[i]) {
          // randomly add particles out of that 250,000 that were not on the head model
          const randomNotHeadParticleIndex = Math.random() * notInHeadYetCount;
          reachedLips.current[i] = true;
          reachedLips.current[randomNotHeadParticleIndex + headPositionsLength] = true;
          // each particle has 5% chance of getting blue or red when is going to be blowed
          if (Math.random() > 0.95) {
            const blueOrRed = Math.random() > 0.5 ? new THREE.Vector3(1, 0, 0) : new THREE.Vector3(0, 0, 1);
            colors[i3 + 0] = blueOrRed.x;
            colors[i3 + 1] = blueOrRed.y;
            colors[i3 + 2] = blueOrRed.z;
          }
        }
        continue;
      };
      
      // find the force the pull the particle to the mouth
      // and calculate acceleration and velocity
      // and updated the position based on velocity
      const distanceSquared = Math.max(force.lengthSq(), 0.5);
      force.normalize().multiplyScalar(0.5 / distanceSquared);
      forces.add(force);

      const acceleration = forces.divideScalar(1);

      velocities[i3 + 0] += acceleration.x * delta;
      velocities[i3 + 1] += acceleration.y * delta;
      velocities[i3 + 2] += acceleration.z * delta;
      positions[i3 + 0] += velocities[i3 + 0] * delta;
      positions[i3 + 1] += velocities[i3 + 1] * delta;
      positions[i3 + 2] += velocities[i3 + 2] * delta;
    };

    positionAttribute.needsUpdate = true;
    velocityAttribute.needsUpdate = true;
    colorAttribute.needsUpdate = true;
    curlAttribute.needsUpdate = true;
  });

  // get the positions from the head model and
  // normalize the positions to the range of [-0.5, 0.5]
  useEffect(() => {
    // get the positions from the model object
    const modelPositions = (headModel.nodes.obj0 as any).geometry.attributes.position.array;

    // find the minimum and the maximum value for each of x, y, and z
    let xmin = 0;
    let xmax = 0;
    let ymin = 0;
    let ymax = 0;
    let zmin = 0;
    let zmax = 0;
    
    for (let i = 0; i < modelPositions.length; i += 3) {
      const x = modelPositions[i + 0];
      const y = modelPositions[i + 1];
      const z = modelPositions[i + 2];
      if (x < xmin) { xmin = x }
      if (x > xmax) { xmax = x }
      if (y < ymin) { ymin = y }
      if (y > ymax) { ymax = y }
      if (z < zmin) { zmin = z }
      if (z > zmax) { zmax = z }
    }

    // calculate the length for each of x, y, and z
    const xlen = xmax - xmin;
    const ylen = ymax - ymin;
    const zlen = zmax - zmin;
    const max = Math.max(xlen, ylen, zlen);

    // normalize each particle's position
    for (let i = 0; i < modelPositions.length; i += 3) {
      const x = modelPositions[i + 0];
      const y = modelPositions[i + 1];
      const z = modelPositions[i + 2];
      modelPositions[i + 0] = ((x - xmin) / max) - 0.5 * (xlen / ylen);
      modelPositions[i + 1] = (y - ymin) / max - 0.5;
      modelPositions[i + 2] = (z - zmin) / max - 0.5;
    }

    setHeadPositions(modelPositions);

  }, [(headModel.nodes.obj0 as any).geometry]);
  
  // animations
  useEffect(() => {
    if (!particles) return;
    if (!headPositions) return;
    if (stage !== Stage.Head) return;
    
    const material = particles.material;
    const positionAttribute = particles.geometry.attributes.position;
    const colorAttribute = particles.geometry.attributes.aColor;
    const curlAttribute = particles.geometry.attributes.aCurl;
    const headColors = (headModel.nodes.obj0 as any).geometry.attributes.color.array;

    // draw 250,000 particles (out of 1,000,000)
    const COUNT = 250_000;
    particles.geometry.setDrawRange(0, COUNT); // [start, count]

    // set bounding sphere radius to something huge to 
    // make sure that particles are rendered even if they're not visible to the camera
    particles.geometry.boundingSphere!.radius = 1000;

    // intialize the material for the head scene
    material.uniforms.uScale = { value: 2.5 };
    material.uniforms.uAlpha = { value: 0.8 };
    material.uniforms.uPointSize = { value: 1 };
    material.uniforms.uProgressZ = { value: -0.5 };
    material.uniforms.uBlow = { value: 0 };
    material.vertexShader = vertexShader;
    material.fragmentShader = fragmentShader;
    material.needsUpdate = true;
    blowOutPositions.current = new Float32Array(COUNT * 3);
    reachedLips.current = new Array(COUNT).fill(false);
    
    // set geometry
    const headPositionsLength = headPositions.length / 3;
    for (let i = 0; i < headPositionsLength; i++) {
      const i3 = i * 3;
      const i4 = i * 4;
      positionAttribute.array[i3 + 0] = headPositions[i3 + 0];
      positionAttribute.array[i3 + 1] = headPositions[i3 + 1];
      positionAttribute.array[i3 + 2] = headPositions[i3 + 2];
      // i had already colored the eyes and the mouth with the blender program
      colorAttribute.array[i3 + 0] = headColors[i4 + 0] / 65535; // divide by 65535 to normalize the 16-bit value
      colorAttribute.array[i3 + 1] = headColors[i4 + 1] / 65535; // divide by 65535 to normalize the 16-bit value
      colorAttribute.array[i3 + 2] = headColors[i4 + 2] / 65535; // divide by 65535 to normalize the 16-bit value
      blowOutPositions.current[i3 + 0] = (Math.random() - 0.5) * 5;
      blowOutPositions.current[i3 + 1] = mouth.y * 2.5 + Math.cos(i) * 7;
      blowOutPositions.current[i3 + 2] = mouth.z * 2.5 + 12 + Math.sin(i) * 4;
      reachedLips.current[i] = false;
      curlAttribute.array[i] = 0.1;
    }

    // particles out of the 250,000 that are not part of the head
    // so i place them at the mouth but do not show
    // i add them to the current particles when the blowing time comes
    for (let i = headPositionsLength; i < COUNT; i++) {
      const i3 = i * 3;
      positionAttribute.array[i3 + 0] = mouth.x;
      positionAttribute.array[i3 + 1] = mouth.y;
      positionAttribute.array[i3 + 2] = mouth.z;
      blowOutPositions.current[i3 + 0] = (Math.random() - 0.5) * 5;
      blowOutPositions.current[i3 + 1] = mouth.y * 2.5 + Math.cos(i) * 7;
      blowOutPositions.current[i3 + 2] = mouth.z * 2.5 + 12 + Math.sin(i) * 4;
      reachedLips.current[i] = false;
      curlAttribute.array[i] = 0.1;
    }

    colorAttribute.needsUpdate = true;
    positionAttribute.needsUpdate = true;

    // create gsap timeline for animations
    const timeline = gsap.timeline({
      ease: "power1.inOut",
      onUpdate: () => {
        // switch to the next stage before the animation is complete to
        // achieve a smoother transition
        const progress = timeline.totalProgress();
        if (progress >= 0.75 && isStageDone.current !== true) {
          isStageDone.current = true;
          const animations = timeline.getChildren();
          animations.forEach((animation) => {
            animation.kill();
          });
          setStage(Stage.Galaxy);
        }
      }
    });
    
    // reset previous camera and particles changes
    particles.position.set(0, 0, 0)
    particles.rotation.set(0, 0, 0)
    camera.position.set(0, 0, 13);
    camera.lookAt(new THREE.Vector3(0, 0, 0));

    // bring the head into the view
    timeline.to(material.uniforms.uProgressZ, {
      value: 2,
      duration: 6,
    });

    // update the particles count text
    const count = { value : 50000 };
    timeline.to(count, {
      value: COUNT,
      duration: 1,
      onUpdate() {
        showParticleCount(count.value);
      }
    }, "<");
    
    // move camera close to the head very slowly
    timeline.to(camera.position, {
      z: 4,
      y: -0.2,
      duration: 10,
    }, "<");


    // a set of rotation animations for the head
    timeline.to(particles.rotation, {
      y: -0.6,
      duration: 1.1,
    },  "<0.9");

    timeline.to(particles.rotation, {
      x: -0.5,
      duration: 1.1,
    },  "<0.2");

    timeline.to(particles.rotation, {
      y: 0.2,
      duration: 1.1,
    },  "<0.9");

    timeline.to(particles.rotation, {
      x: 0.3,
      duration: 1.2,
    },  "<0.2");

    timeline.to(particles.rotation, {
      x: -0.56,
      duration: 2.2,
    },  "<0.9");

    timeline.to(particles.rotation, {
      y: 0.64,
      duration: 3,
    },  "<");

    timeline.to(particles.rotation, {
      y: 1,
      z: 0.85,
      duration: 8,
    },  "<");

    // start the blowing animation
    // the rest of the animations happens above on the "useFrame" section
    timeline.to(material.uniforms.uBlow, {
      value: 1,
      duration: 5
    },  "<");
    
    // move the camera to follow blowed particles
    timeline.to(camera.position, {
      x: 6,
      z: 2,
      y: 1,
      duration: 7,
      ease: "power1.inOut", 
    }, "<1");
    
    // fade out the particles on exit
    timeline.to(material.uniforms.uAlpha, {
      value: 0,
      duration: 2
    },  "<2.5");

  }, [stage, headPositions]);
}

export default useHead;

================================================================================
File: src/animations/useImage/imageShaders.ts
Size: 1.44 kB
================================================================================

import noise from "../../shaders/noise";

export const vertexShader = `
  attribute vec3 aColor;

  uniform float uPointSize;
  uniform float uTime;
  uniform float uDistortion;
  uniform float uDepthByLuminance;
  uniform float uNoiseWaveAmpitude;

  varying vec3 vColor;

  ${noise}

  void main() {
    vec3 pos = position;

    // distort particles (before image is shown)
    pos += curlNoise(pos * 0.8 + uTime * 0.3) * uDistortion;

    // color is coming from the data grabbed from the image
    vec3 color = aColor;
    
    // animate particles in a wave motion slowly
    color += snoise(vec3(pos.xy * 2.0, uTime * 1.0)) * uNoiseWaveAmpitude;
    
    // displace the z postion based on how bright each particle is
    // brigher particles get closer to the camera
    // this would give the image a 3d looking effect
    float luminance = color.r * 0.299 + color.g * 0.587 + color.b * 0.114;
    pos.z += luminance * uDepthByLuminance;
    
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(pos, 1.0);
    gl_PointSize = uPointSize;

    // pass the color to the fragment shader to be used there
    vColor = color;
  }
`;

export const fragmentShader = `
  varying vec3 vColor;
  uniform float uAlpha;

  void main() {
    // use the color calculated and coming from the vertex shader
    vec3 color = vColor;
    color *= 0.92; // decrease brightness a bit
    gl_FragColor = vec4(color, uAlpha);
  }
`;

================================================================================
File: src/animations/useImage/index.ts
Size: 37 B
================================================================================

export { default } from "./useImage";

================================================================================
File: src/animations/useImage/useImage.tsx
Size: 7 kB
================================================================================

import { useEffect, useRef, useState } from "react";
import { useThree } from "@react-three/fiber";
import * as THREE from "three";
import gsap from "gsap";

import { fragmentShader, vertexShader } from "./imageShaders";
import { showParticleCount } from "../../utils";
import useStore, { Stage } from "../../store";

import imagePath from "../../../assets/image.jpg";

function useImage() {
  const [image, setImage] = useState<HTMLImageElement>();
  const [imagePositions, setImagePositions] = useState<Float32Array>();
  const [imageColors, setImageColors] = useState<Float32Array>();
  const stage = useStore(store => store.stage);
  const setStage = useStore(store => store.setStage);
  const particles = useStore(store => store.particlesRef.current);
  const camera = useThree(context => context.camera);
  const isStageDone = useRef(false);

  // load the image
  useEffect(() => {
    // if already loaded then skip
    if (image) return;

    const img = new Image();
    img.src = imagePath;
    img.onload = () => { 
      // when the image is loaded create a canvas element
      // and draw the image on the canvas element
      // so i can read the image data, which is the color of each pixel
      const canvas = document.createElement("canvas");
      canvas.width = img.width;
      canvas.height = img.height;
      const ctx = canvas.getContext("2d");
      ctx?.drawImage(img, 0, 0);
      const imageData = ctx!.getImageData(0, 0, img.width, img.height).data;

      const imageLength = img.width * img.height;
      const imagePositions = new Float32Array(imageLength * 3);
      const imageColors = new Float32Array(imageLength * 3);

      // for each pixel on the image set a particle's color and position to that pixel
      for (let i = 0; i < imageLength; i++) {
        const i3 = i * 3;
        const i4 = i * 4;
        const r = imageData[i4 + 0] / 255;
        const g = imageData[i4 + 1] / 255;
        const b = imageData[i4 + 2] / 255;
        imagePositions[i3 + 0] = ((i % img.width) / img.width - 0.5) * 3 * (img.width / img.height);
        imagePositions[i3 + 1] = (1.0 - Math.floor(i / img.width) / img.height - 0.5) * 3;
        imagePositions[i3 + 2] = 0;
        imageColors[i3 + 0] = r;
        imageColors[i3 + 1] = g;
        imageColors[i3 + 2] = b;
      }

      setImagePositions(imagePositions);
      setImageColors(imageColors);
      setImage(img);
    };
  }, [image]);

  useEffect(() => {
    if (!imageColors) return;
    if (!imagePositions) return;
    if (!image) return;
    if (!particles) return;
    if (stage !== Stage.Image) return;

    const material = particles.material;
    const positionAttribute = particles.geometry.attributes.position;
    const colorAttribute = particles.geometry.attributes.aColor;

    // draw 50,000 particles (out of 1,000,000)
    const imageLength = image.width * image.height;
    particles.geometry.setDrawRange(0, imageLength); // [start, count]

    // initialize material for the image stage
    material.uniforms.uDistortion = { value: 0 };
    material.uniforms.uDepthByLuminance = { value: 0 };
    material.uniforms.uNoiseWaveAmpitude = { value: 0 };
    material.uniforms.uAlpha = { value: 1 };
    material.vertexShader = vertexShader;
    material.fragmentShader = fragmentShader;
    material.needsUpdate = true;

    // create gsap timeline for animations
    const timeline = gsap.timeline({
      ease: "power3.inOut",
      onUpdate: () => {
        // switch to the next stage before the animation is complete to
        // achieve a smoother transition
        const progress = timeline.totalProgress();
        if (progress >= 0.6 && isStageDone.current !== true) {
          isStageDone.current = true;
          const animations = timeline.getChildren();
          animations.forEach((animation) => {
            animation.kill();
          });
          setStage(Stage.Head);
        }
      }
    });
    
    // distort the previous shape
    // using noise inside the shaders
    timeline.to(material.uniforms.uDistortion, {
      value: 1.5,
      duration: 2,
    });

    // update the particles count text
    const count = { value: 10000 };
    timeline.to(count, {
      value: imageLength,
      duration: 1,
      onUpdate() {
        showParticleCount(count.value);
      }
    }, "<");

    // reset particles rotation
    timeline.to(particles.rotation, {
      x: 0,
      y: 0,
      z: 0,
      duration: 1.5,
    }, "<");

    // move camera farther
    timeline.to(camera.position, {
      z: "+=1.5",
      duration: 1,
      onUpdate: () => {
        camera.lookAt(lookAt);
      }
    }, "<");
    

    // finish distortion
    timeline.to(material.uniforms.uDistortion, {
      value: 0,
      duration: 2,
    }, "<90%");

    // change positions to form an image
    // @ts-ignore
    timeline.to(positionAttribute.array, {
      endArray: imagePositions,
      duration: 1,
      onUpdate: () => {
        positionAttribute.needsUpdate = true;
      }
    }, "<10%");

    // set the particles' color to the colors grabbed from the pixels of the image
    // @ts-ignore
    timeline.to(colorAttribute.array, {
      endArray: imageColors,
      duration: 1,
      onUpdate: () => {
        colorAttribute.needsUpdate = true;
      }
    }, "<30%");

    // smaller particles
    timeline.to(material.uniforms.uPointSize, {
      value: 2,
      duration: 1,
    }, "<");

    // give depth by displacing the particles
    timeline.to(material.uniforms.uDepthByLuminance, {
      value: 0.2,
      duration: 1,
    }, "<");

    // slowly move the particles on wave motion
    timeline.to(material.uniforms.uNoiseWaveAmpitude, {
      value: 0.1,
      duration: 1,
    }, "<");

    // move camera closer to image
    timeline.to(camera.position, {
      z: "-=2",
      duration: 0.5,
      onUpdate: () => {
        camera.lookAt(lookAt);
      }
    }, "<90%");


    // look at the image from the side
    const lookAt = new THREE.Vector3(0, 0, 0);
    timeline.to(camera.position, {
      x: 2.42,
      y: 0.14,
      z: 2.5,
      duration: 1.5,
      ease: "power4.out",
      onUpdate: () => {
        camera.lookAt(lookAt);
      }
    }, "<80%");
    timeline.to(particles.position, {
      x: 0,
      duration: 2,
    }, "<");

    // rotate the image
    timeline.to(particles.rotation, {
      y: -0.5,
      duration: 2,
    }, "<");
    timeline.to(particles.rotation, {
      y: -1,
      duration: 3,
      ease: "linear",
    }, "<65%");

    // go behind the image
    timeline.to(camera.position, {
      x: 1.5,
      y: 0.1,
      z: 1.6,
      duration: 2,
      ease: "linear",
    }, "<");

    timeline.to(material.uniforms.uDepthByLuminance, {
      value: 30,
      ease: "linear",
      duration: 4,
    }, "<0.1");

    // fade out the image
    timeline.to(material.uniforms.uAlpha, {
      value: 0,
      duration: 1.5,
    }, "<");

  }, [image, imageColors, imagePositions, stage]);
}

export default useImage;

================================================================================
File: src/animations/useLinePlaneAndCube/index.ts
Size: 48 B
================================================================================

export { default } from "./useLinePlaneAndCube";

================================================================================
File: src/animations/useLinePlaneAndCube/lineAndPlaneShaders.ts
Size: 366 B
================================================================================

export const vertexShader = `
  uniform float uPointSize;

  void main() {
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
    gl_PointSize = uPointSize;
  }
`;

export const fragmentShader = `
  void main() {
    vec3 color = vec3(1.0);
    color *= 0.92; // decrease brightness a bit
    gl_FragColor = vec4(color, 1.0);
  }
`;

================================================================================
File: src/animations/useLinePlaneAndCube/useLinePlaneAndCube.ts
Size: 5.48 kB
================================================================================

import { useEffect, useRef } from "react";
import gsap from "gsap";

import { fragmentShader, vertexShader } from "./lineAndPlaneShaders";
import { showParticleCount } from "../../utils";
import useStore, { Stage } from "../../store";

function useLinePlaneAndCube() {
  const stage = useStore(store => store.stage);
  const setStage = useStore(store => store.setStage);
  const particles = useStore(store => store.particlesRef.current);
  const isStageDone = useRef(false);
  
  useEffect(() => {
    if (!particles) return;
    if (stage !== Stage.LinePlaneAndCube) return;

    const material = particles.material;
    const positionAttribute = particles.geometry.attributes.position;

    // draw 512 particles (out of 1,000,000)
    const COUNT_LINE = 8;
    const COUNT_PLANE = COUNT_LINE * COUNT_LINE; // 64
    const COUNT_CUBE = COUNT_LINE * COUNT_PLANE; // 512
    particles.geometry.setDrawRange(0, COUNT_CUBE); // [start, count]

    // intialize material for the line, plane, and cube scene
    material.uniforms.uPointSize = { value: 64 };
    material.vertexShader = vertexShader;
    material.fragmentShader = fragmentShader;
    material.needsUpdate = true;

    
    // create gsap timeline for animations
    const timeline = gsap.timeline({
      ease: "power3.inOut",
      onUpdate: () => {
        // switch to the next stage before the animation is complete to
        // achieve a smoother transition
        const progress = timeline.totalProgress();
        if (progress >= 0.5 && isStageDone.current !== true) {
          isStageDone.current = true;
          setStage(Stage.SphereAndSpinningTop);
          setTimeout(() => {
            const animations = timeline.getChildren();
            animations.forEach((animation) => {
              animation.kill();
            });
          }, 500);
        }
      }
    });

    // spread the particles in line
    const linePositions = new Float32Array(COUNT_CUBE * 3);
    for (let x = 0; x < COUNT_LINE; x++) {
      for (let y = 0; y < COUNT_LINE; y++) {
        for (let z = 0; z < COUNT_LINE; z++) {
          const i = ((z * COUNT_LINE * COUNT_LINE) + (y * COUNT_LINE) + x) * 3;
          linePositions[i + 0] = (x / COUNT_LINE - 0.5) * 6;
          linePositions[i + 1] = 0;
          linePositions[i + 2] = 0;
        }
      }
    }

    timeline.to(positionAttribute.array, {
      // @ts-ignore
      endArray: linePositions,
      duration: 1,
      onUpdate: () => {
        positionAttribute.needsUpdate = true;
      }
    });

    // update the particles count text
    const count = { value: 1 };
    timeline.to(count, {
      value: 8,
      duration: 0.5,
      onUpdate() {
        const value = Math.floor(count.value);
        showParticleCount(value);
        if (value === 2) {
          document.querySelector(".name")!.textContent = "Particles";
        }
      }
    }, "<");

    // change the size of particles as the shape is a-changin'
    timeline.to(material.uniforms.uPointSize, {
      value: 32,
      duration: 1,
    }, "<");

    // spread the particles in plane
    const planePositions = new Float32Array(COUNT_CUBE * 3);
    for (let x = 0; x < COUNT_LINE; x++) {
      for (let y = 0; y < COUNT_LINE; y++) {
        for (let z = 0; z < COUNT_LINE; z++) {
          const i = ((z * COUNT_LINE * COUNT_LINE) + (y * COUNT_LINE) + x) * 3;
          planePositions[i + 0] = (x / COUNT_LINE - 0.5) * 4;
          planePositions[i + 1] = (y / COUNT_LINE - 0.5) * 4;
          planePositions[i + 2] = 0;
        }
      }
    }

    timeline.to(positionAttribute.array, {
      // @ts-ignore
      endArray: planePositions,
      duration: 0.75,
      delay: 0.25,
      onUpdate: () => {
        positionAttribute.needsUpdate = true;
      }
    });

    // update the particles count text
    timeline.to(count, {
      value: 64,
      duration: 0.5,
      onUpdate() {
        showParticleCount(count.value);
      }
    }, "<");

    // change the size of particles as the shape is a-changin'
    timeline.to(material.uniforms.uPointSize, {
      value: 16,
      duration: 0.75,
    }, "<");

    // spread the particles in cube
    const cubePositions = new Float32Array(COUNT_CUBE * 3);
    for (let x = 0; x < COUNT_LINE; x++) {
      for (let y = 0; y < COUNT_LINE; y++) {
        for (let z = 0; z < COUNT_LINE; z++) {
          const i = ((z * COUNT_LINE * COUNT_LINE) + (y * COUNT_LINE) + x) * 3;
          cubePositions[i + 0] = (x / COUNT_LINE - 0.5) * 3;
          cubePositions[i + 1] = (y / COUNT_LINE - 0.5) * 3;
          cubePositions[i + 2] = (z / COUNT_LINE - 0.5) * 3;
        }
      }
    }

    timeline.to(positionAttribute.array, {
      // @ts-ignore
      endArray: cubePositions,
      duration: 1,
      delay: 0.25,
      onUpdate: () => {
        positionAttribute.needsUpdate = true;
      }
    });

    // update the particles count text
    timeline.to(count, {
      value: 512,
      duration: 0.75,
      onUpdate() {
        showParticleCount(count.value);
      }
    }, "<");

    // change the size of particles as the shape is a-changin'
    timeline.to(material.uniforms.uPointSize, {
      value: 8,
      duration: 1,
    }, "<");
    
    // rotate cube
    timeline.to(particles.rotation, {
      x: 0.55, 
      y: -0.9, 
      duration: 1.25,
    }, "<");

    timeline.to(particles.rotation, {
      x: 0.65, 
      y: -1.75,
      duration: 5,
    }, "<30%");

  }, [stage]);
}

export default useLinePlaneAndCube;

================================================================================
File: src/animations/useOneParticle/index.ts
Size: 44 B
================================================================================

export { default } from "./useOneParticle"; 

================================================================================
File: src/animations/useOneParticle/oneParrticleShaders.ts
Size: 1.16 kB
================================================================================

export const vertexShader = `
  void main() {
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
    gl_PointSize = 64.0;
  }
`;

export const fragmentShader = `
  uniform float uCircle;
  uniform float uTriangle;

  #define PI 3.14159265359
  #define TWO_PI 6.28318530718

  vec2 rotate(vec2 v, float a) {
    float s = sin(a);
    float c = cos(a);
    mat2 m = mat2(c, s, -s, c);
    return m * v;
  }
  
  void main() {
    vec2 uv = gl_PointCoord;
    vec3 color = vec3(1.0);
    color *= 0.92; // decrease brightness a bit

    float alpha = 1.0;
    
    // circle shape
    float radius = mix(1.0, 0.5, uCircle);
    vec2 distance = uv - vec2(0.5);
    float circle = 1.0 - step(radius, length(distance));
    alpha = circle;

    // tirangle shape
    vec2 st = uv * 2.0 - 1.0;
    st = rotate(st, PI);
    int N = 3;
    float a = atan(st.x,st.y)+PI;
    float r = TWO_PI/float(N);
    float d = cos(floor(.5+a/r)*r-a)*length(st);
    float triangle = 1.0 - step(0.5, d);

    float shape = 1.0 - step(radius, mix(length(distance), d, uTriangle));

    alpha = shape;

    gl_FragColor = vec4(color, alpha);
  }
`;

================================================================================
File: src/animations/useOneParticle/useOneParticle.ts
Size: 2.36 kB
================================================================================

import { useEffect } from "react";
import gsap from "gsap";

import { fragmentShader, vertexShader } from "./oneParrticleShaders";
import useStore, { Stage } from "../../store";
import { wait } from "../../utils";

function useOneParticle() {
  const stage = useStore(store => store.stage);
  const setStage = useStore(store => store.setStage);
  const particles = useStore(store => store.particlesRef.current);
  
  useEffect(() => {
    if (!particles) return;
    if (stage !== Stage.OneParticle) return;

    const material = particles.material;
    const positionAttribute = particles.geometry.attributes.position;

    // draw only 1 particle (out of 1,000,000)
    particles.geometry.setDrawRange(0, 1); // [start, count]

    // set the starting position to the outside of view
    positionAttribute.setXYZ(0, 0, -5, 0); // [index, x, y, z]
    positionAttribute.needsUpdate = true;

    // intialize material for the one particle scene
    material.vertexShader = vertexShader;
    material.fragmentShader = fragmentShader;
    material.uniforms.uCircle = { value: 0 };
    material.uniforms.uTriangle = { value: 0 };
    material.needsUpdate = true;
    
    // create gsap timeline for animations
    const timeline = gsap.timeline({
      ease: "power3.inOut", 
      onComplete: () => {
        wait(500).then(() => {
          setStage(Stage.LinePlaneAndCube);
        });
      } 
    });

    // animate the 1 particle into the view
    const endPosition = [0, 0, 0];
    timeline.to(positionAttribute.array, {
      endArray: endPosition,
      duration: 1.5,
      onUpdate: () => {
        positionAttribute.needsUpdate = true;
      }
    });

    // animate the particle count text into the view
    gsap.set(".text", { y: 100 });
    
    timeline.to(".text", {
      y: 0,
      opacity: 0.9,
      duration: 1,
    }, "<0.5");

    // change the shape of the particle
    timeline.to(material.uniforms.uCircle, {
      value: 1,
      duration: 0.5,
      delay: 0.5,
    });
    timeline.to(material.uniforms.uTriangle, {
      value: 1,
      duration: 0.5,
      delay: 0.3,
    });
    timeline.to(material.uniforms.uCircle, {
      value: 0,
      duration: 0.4,
      delay: 0.3,
    });
    timeline.to(material.uniforms.uTriangle, {
      value: 0,
      duration: 0.4,
    }, "<");

  }, [stage]);
}

export default useOneParticle;

================================================================================
File: src/animations/useSphereAndMath/index.ts
Size: 52 B
================================================================================

export { default } from "./useSphereAndSpinningTop";

================================================================================
File: src/animations/useSphereAndMath/sphereAndSpinningTopShaders.ts
Size: 366 B
================================================================================

export const vertexShader = `
  uniform float uPointSize;

  void main() {
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
    gl_PointSize = uPointSize;
  }
`;

export const fragmentShader = `
  void main() {
    vec3 color = vec3(1.0);
    color *= 0.92; // decrease brightness a bit
    gl_FragColor = vec4(color, 1.0);
  }
`;

================================================================================
File: src/animations/useSphereAndMath/useSphereAndSpinningTop.ts
Size: 5.5 kB
================================================================================

import { useEffect, useRef } from "react";
import gsap from "gsap";

import { fragmentShader, vertexShader } from "./sphereAndSpinningTopShaders";
import { showParticleCount } from "../../utils";
import useStore, { Stage } from "../../store";

function useSphereAndSpinningTop() {
  const stage = useStore(store => store.stage);
  const setStage = useStore(store => store.setStage);
  const particles = useStore(store => store.particlesRef.current);
  const isStageDone = useRef(false);

  useEffect(() => {
    if (!particles) return;
    if (stage !== Stage.SphereAndSpinningTop) return;

    const material = particles.material;
    const positionAttribute = particles.geometry.attributes.position;

    // draw 10,000 particles (out of 1,000,000)
    // draw 2,000 particles first for the sphere
    const COUNT = 10_000;
    const SPHERE_COUNT = 2000;
    particles.geometry.setDrawRange(0, SPHERE_COUNT); // [start, count]

    // initialize material for the sphere and spinning top stage
    material.vertexShader = vertexShader;
    material.fragmentShader = fragmentShader;
    material.needsUpdate = true;

    
    // create gsap timeline for animations
    const timeline = gsap.timeline({ 
      ease: "power3.inOut",
      onUpdate: () => {
        // switch to the next stage before the animation is complete to
        // achieve a smoother transition
        const progress = timeline.totalProgress();
        if (progress >= 0.75 && isStageDone.current !== true) {
          isStageDone.current = true;
          setStage(Stage.Image);
          setTimeout(() => {
            const animations = timeline.getChildren();
            animations.forEach((animation) => {
              animation.kill();
            });
          }, 500);
        }
      }
    });

    // sphere geometry
    const spherePositions = new Float32Array(SPHERE_COUNT * 3);
    for (let i = 0; i < SPHERE_COUNT; i++) {
      const i3 = i * 3;
      const r = 1.3;
      const theta = Math.random() * Math.PI * 2;
      const phi = (Math.random() - 0.5) * Math.PI;
      spherePositions[i3 + 0] = r * Math.cos(phi) * Math.cos(theta);
      spherePositions[i3 + 1] = r * Math.cos(phi) * Math.sin(theta);
      spherePositions[i3 + 2] = r * Math.sin(phi);
    }

    // change the shape to sphere
    timeline.to(positionAttribute.array, {
      // @ts-ignore
      endArray: spherePositions,
      duration: 1,
      onUpdate: () => {
        positionAttribute.needsUpdate = true;
      }
    });

    const count = { value: 512 };
    timeline.to(count, {
      value: SPHERE_COUNT,
      duration: 0.75,
      onUpdate() {
        showParticleCount(count.value);
      }
    }, "<");

    // update particles size as the shape is a-changin'
    timeline.to(material.uniforms.uPointSize, {
      value: 4,
      duration: 1,
    }, "<");

    // rotate the sphere
    timeline.to(particles.rotation, {
      x: -2.5,
      y: -0.5, 
      z: -1,
      duration: 2,
    }, "<");

    // spinning top geometry
    const spinningTopPositions = new Float32Array(COUNT * 3);
    function calculateRadius(m: number, n1: number, n2: number, n3: number, a: number, b: number, theta: number) {
      return Math.pow(
        Math.pow(Math.abs(1 / a * Math.cos(m * theta / 4)), n2) +
        Math.pow(Math.abs(1 / b * Math.sin(m * theta / 4)), n3),
        -1 / n1
      );
    }
    for (let i = 0; i < COUNT; i++) {
      const i3 = i * 3;    
      const theta = ((Math.random() - 0.5) * 2) * Math.PI;
      const phi = (Math.random() - 0.5) * Math.PI;    
      const r = 1.1;
      const r1 = calculateRadius(4, 2, 1, 1, 1.5, 1.5, theta);
      const r2 = calculateRadius(4, 0.4, 0.8, 0.9, 1, 1, phi);      
      spinningTopPositions[i3 + 0] = r * r1 * Math.cos(theta) * r2 * Math.cos(phi);
      spinningTopPositions[i3 + 1] = r * r1 * Math.sin(theta) * r2 * Math.cos(phi);
      spinningTopPositions[i3 + 2] = r * r2 * Math.sin(phi);
    }

    // move sphere up a bit
    timeline.to(particles.position, {
      y: 1, 
      duration: 1,
    }, "<50%");

    // change the shape into spinning top
    // @ts-ignore
    timeline.to(positionAttribute.array, {
      endArray: spinningTopPositions,
      duration: 1,
      onUpdate: () => {
        // increase the draw count since it's moving from
        // drawing the sphere (2,000 particles) to drawing the spinning top (10,000 particles)
        if (particles.geometry.drawRange.count !== COUNT) {
          // draw 10,000 particles (out of 1,000,000)
          particles.geometry.setDrawRange(0, COUNT);
        }
        
        positionAttribute.needsUpdate = true;
      }
    }, "<20%");

    // update the particles count text
    timeline.to(count, {
      value: COUNT,
      duration: 1,
      onUpdate() {
        showParticleCount(count.value);
      }
    }, "<");

    // change the size of particles as the shape is a-changin'
    timeline.to(material.uniforms.uPointSize, {
      value: 2,
      duration: 1,
    }, "<");

    // transition the spinning top from up to down to have "dropping" effect
    timeline.to(particles.position, {
      y: 0, 
      duration: 1,
      ease: "bounce.out",
    }, "<10%");

    // rotate the spinning top
    timeline.to(particles.rotation, {
      x: -2.5,
      y: -1, 
      z: -2.87,
      duration: 0.5,
    }, "<");
    timeline.to(particles.rotation, {
      x: -1.27,
      y: 0.35, 
      z: 17.8,
      duration: 2,
    }, "<55%");

  }, [stage]);
}

export default useSphereAndSpinningTop;

================================================================================
File: src/components/FBO/FBO.tsx
Size: 5.51 kB
================================================================================

import { useCallback, useEffect, useMemo, useRef } from "react";
import { createPortal, useFrame } from "@react-three/fiber";
import * as THREE from "three";

import useStore from "../../store";

const FBO = () => {
  const meshRef = useRef<THREE.Mesh<THREE.BufferGeometry, THREE.ShaderMaterial>>(null!);
  const fbo = useStore(store => store.fboRef.current);
  
  // set width and height for texture that is being going to be rendered by the fbo
  // the amount of vertices is equal to width x height (1000 x 1000 = 1,000,000)
  const [width, height] = useMemo(() => [1000, 1000], []);

  // create FBO (frame-buffer object) to render positions and velocities as texture to GPU
  // then do the calculation on the GPU and get back new positions and velocities as texture
  useEffect(() => {
    fbo.positions.renderTarget = new THREE.WebGLRenderTarget(width, height, {
      minFilter: THREE.NearestFilter,
      magFilter: THREE.NearestFilter,
      format: THREE.RGBAFormat,
      type: THREE.FloatType,
    });
    fbo.positions.renderTarget2 = fbo.positions.renderTarget?.clone();

    fbo.velocities.renderTarget = new THREE.WebGLRenderTarget(width, height, {
      minFilter: THREE.NearestFilter,
      magFilter: THREE.NearestFilter,
      format: THREE.RGBAFormat,
      type: THREE.FloatType,
    });
    fbo.velocities.renderTarget2 = fbo.velocities.renderTarget?.clone();
    
    fbo.mesh = meshRef.current;

    return () => {
      fbo.positions.renderTarget?.dispose();
      fbo.positions.renderTarget2?.dispose();
      fbo.velocities.renderTarget?.dispose();
      fbo.velocities.renderTarget2?.dispose();
    }
  }, []);

  // the fbo needs its own scene and camera
  // use orthographic camera, because a perspective camera might render a texture 
  // that its pixels are not square or don't have the same width or height
  const scene = useMemo(() => new THREE.Scene(), []);
  const camera = useMemo(() => {
    return new THREE.OrthographicCamera(-1, 1, 1, -1, 1 / Math.pow(2, 53), 1);
  }, []);

  const checkIsInitialized = useCallback(() => {
    if (!fbo.positions.vertexShader) return false;
    if (!fbo.positions.fragmentShader) return false;
    if (!fbo.velocities.vertexShader) return false;
    if (!fbo.velocities.fragmentShader) return false;
    if (!fbo.mesh?.material.uniforms.uPositionsTexture?.value) return false;
    if (!fbo.mesh?.material.uniforms.uVelocitiesTexture?.value) return false;
    return true;
  }, []);

  useFrame((state, delta) => {
    if (!checkIsInitialized()) return;

    // set delta time uniform value
    fbo.mesh!.material.uniforms.uDeltaTime.value = delta;
    fbo.mesh!.material.uniforms.uTime.value = state.clock.getElapsedTime();

    // swap render targets
    // renderTarget2 would be the current data grabbed from the renderTarget
    // renderTarget would be the previous renderTarget acting as an empty render target to save new data on the next frame
    const temp = fbo.velocities.renderTarget;
    fbo.velocities.renderTarget = fbo.velocities.renderTarget2;
    fbo.velocities.renderTarget2 = temp;

    // render velocity texture using renderTarget
    fbo.mesh!.material.vertexShader = fbo.velocities.vertexShader!;
    fbo.mesh!.material.fragmentShader = fbo.velocities.fragmentShader!;
    fbo.mesh!.material.needsUpdate = true;
    // @ts-ignore
    state.gl.setRenderTarget(fbo.velocities.renderTarget!);
    state.gl.clear();
    state.gl.render(scene, camera);

    // the texture is now the current velocities
    // save it as uniform to be used by the shaders
    fbo.mesh!.material.uniforms.uVelocitiesTexture.value = fbo.velocities.renderTarget!.texture;

    // everything goes as the same for the positions
    const temp2 = fbo.positions.renderTarget;
    fbo.positions.renderTarget = fbo.positions.renderTarget2;
    fbo.positions.renderTarget2 = temp2;

    fbo.mesh!.material.vertexShader = fbo.positions.vertexShader!;
    fbo.mesh!.material.fragmentShader = fbo.positions.fragmentShader!;
    fbo.mesh!.material.needsUpdate = true;
    // @ts-ignore
    state.gl.setRenderTarget(fbo.positions.renderTarget!);
    state.gl.clear();
    state.gl.render(scene, camera);

    fbo.mesh!.material.uniforms.uPositionsTexture.value = fbo.positions.renderTarget!.texture;
    
    // make sure to reset the render target
    // because outside of this component we want to actullay render our scene
    state.gl.setRenderTarget(null);
  });
  
  // a square plane geometry for the mesh
  const attributes = useMemo(() => {
    const geometry = new Float32Array([
      -1, -1, 0, 1, -1, 0, 1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0,
    ]);
    return { geometry }
  }, []);

  // uniforms for the fbo shader
  // set the data to undefined to fill it later
  const unifroms = useMemo(() => ({
    uResolution: { value: new THREE.Vector2(width, height) },
    uPositionsTexture: { value: null },
    uVelocitiesTexture: { value: null },
    uMass: { value: 10 },
    uBlackholeMass: { value: 1000 },
    uG: { value: 25 },
    uDeltaTime: { value: 0 },
    uTime: { value: 0 },
  }), []);
  
  return createPortal(
      (
        <>
          <mesh ref={meshRef}>
            <bufferGeometry>
              <bufferAttribute attach="attributes-position" array={attributes.geometry} count={attributes.geometry.length / 3} itemSize={3} />
            </bufferGeometry>
            <shaderMaterial uniforms={unifroms} />
          </mesh>
        </>
      ), 
      scene, 
      { camera }
    );
}

export default FBO;

================================================================================
File: src/components/FBO/index.ts
Size: 32 B
================================================================================

export { default } from "./FBO";

================================================================================
File: src/components/Particles/Particles.tsx
Size: 2.18 kB
================================================================================

import { useFrame } from "@react-three/fiber";
import { useMemo } from "react"

import * as animations from "../../animations";
import useStore from "../../store";


const Particles = () => {
  const particlesRef = useStore(store => store.particlesRef);
  
  // initialize particles list
  const COUNT = useMemo(() => 1_000_000, []); 
  
  // initialize attributes and their default values
  const attributes = useMemo(() => {
    const positions = new Float32Array(COUNT * 3);
    const velocities = new Float32Array(COUNT * 3);
    const colors = new Float32Array(COUNT * 3);
    const curl = new Float32Array(COUNT);

    for (let i = 0; i < COUNT; i++) {
      const i3 = i * 3;
      positions[i3 + 0] = 0;
      positions[i3 + 1] = 0;
      positions[i3 + 2] = 0;
      velocities[i3 + 0] = 0;
      velocities[i3 + 1] = 0;
      velocities[i3 + 2] = 0;
      colors[i3 + 0] = 1;
      colors[i3 + 1] = 1;
      colors[i3 + 2] = 1;
      curl[i] = 0;
    }
    
    return { colors, curl, positions, velocities };
  }, [COUNT]);

  // initial uniforms
  const uniforms = useMemo(() => ({
    uTime: { value: 0 },
  }), []);

  
  // set the time uniform on each frame
  useFrame((state) => {
    if (!particlesRef.current) return;
    particlesRef.current.material.uniforms.uTime.value = state.clock.getElapsedTime();
  });

  // animations
  animations.useOneParticle();
  animations.useLinePlaneAndCube();
  animations.useSphereAndMath();
  animations.useImage();
  animations.useHead();
  animations.useGalaxy();

  return useMemo(() => (
    <points ref={particlesRef}>
      <bufferGeometry>
        <bufferAttribute attach="attributes-position" array={attributes.positions} count={COUNT} itemSize={3} />
        <bufferAttribute attach="attributes-velocity" array={attributes.velocities} count={COUNT} itemSize={3} />
        <bufferAttribute attach="attributes-aColor" array={attributes.colors} count={COUNT} itemSize={3} />
        <bufferAttribute attach="attributes-aCurl" array={attributes.curl} count={COUNT} itemSize={1} />
      </bufferGeometry>
      <shaderMaterial uniforms={uniforms} transparent />
    </points>
  ), [])
}
 
export default Particles;

================================================================================
File: src/components/Particles/index.ts
Size: 38 B
================================================================================

export { default } from "./Particles";

================================================================================
File: src/components/Scene/Scene.tsx
Size: 514 B
================================================================================

import { useEffect } from "react";

import useStore, { Stage } from "../../store";
import Particles from "../Particles";
import FBO from "../FBO";
import { OrbitControls } from "@react-three/drei";

const Scene = () => {
  const setStage = useStore(store => store.setStage);

  // start the first stage
  useEffect(() => {
    setStage(Stage.OneParticle);
  }, []);

  return (
    <>
      <color args={["#021119"]} attach="background" />

      <Particles />
      <FBO />
    </>
  );
};

export default Scene;


================================================================================
File: src/components/Scene/index.ts
Size: 35 B
================================================================================

export { default } from "./Scene";


================================================================================
File: src/components/Text/Text.tsx
Size: 174 B
================================================================================

function Text() {
  return (
    <p className="text">
      <span className="count">1</span>
      <span className="name">Particle</span>
    </p>
  )
}

export default Text;

================================================================================
File: src/components/Text/index.ts
Size: 32 B
================================================================================

export { default } from "./Text"

================================================================================
File: src/main.tsx
Size: 242 B
================================================================================

import React from "react";
import ReactDOM from "react-dom/client";

import App from "./App.tsx";
import "./styles.css";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


================================================================================
File: src/shaders/noise.ts
Size: 3.99 kB
================================================================================

//
// Description : Array and textureless GLSL 2D/3D/4D simplex
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//

//
// Curl noise by:
// https://github.com/cabbibo/glsl-curl-noise
//

export default `
  vec3 mod289(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
  }

  vec4 mod289(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
  }

  vec4 permute(vec4 x) {
      return mod289(((x*34.0)+1.0)*x);
  }

  vec4 taylorInvSqrt(vec4 r) {
    return 1.79284291400159 - 0.85373472095314 * r;
  }

  float snoise(vec3 v) {
    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

    // First corner
    vec3 i  = floor(v + dot(v, C.yyy) );
    vec3 x0 =   v - i + dot(i, C.xxx) ;

    // Other corners
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min( g.xyz, l.zxy );
    vec3 i2 = max( g.xyz, l.zxy );

    //   x0 = x0 - 0.0 + 0.0 * C.xxx;
    //   x1 = x0 - i1  + 1.0 * C.xxx;
    //   x2 = x0 - i2  + 2.0 * C.xxx;
    //   x3 = x0 - 1.0 + 3.0 * C.xxx;
    vec3 x1 = x0 - i1 + C.xxx;
    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

    // Permutations
    i = mod289(i);
    vec4 p = permute( permute( permute(
              i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
            + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float n_ = 0.142857142857; // 1.0/7.0
    vec3  ns = n_ * D.wyz - D.xzx;

    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

    vec4 x = x_ *ns.x + ns.yyyy;
    vec4 y = y_ *ns.x + ns.yyyy;
    vec4 h = 1.0 - abs(x) - abs(y);

    vec4 b0 = vec4( x.xy, y.xy );
    vec4 b1 = vec4( x.zw, y.zw );

    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));

    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

    vec3 p0 = vec3(a0.xy,h.x);
    vec3 p1 = vec3(a0.zw,h.y);
    vec3 p2 = vec3(a1.xy,h.z);
    vec3 p3 = vec3(a1.zw,h.w);

    //Normalise gradients
    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

    // Mix final noise value
    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
    m = m * m;
    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                  dot(p2,x2), dot(p3,x3) ) );
  }

  vec3 snoiseVec3(vec3 x) {
    float s  = snoise(vec3( x ));
    float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));
    float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));
    vec3 c = vec3( s , s1 , s2 );
    return c;
  }

  vec3 curlNoise(vec3 p) {
    const float e = .1;
    vec3 dx = vec3( e   , 0.0 , 0.0 );
    vec3 dy = vec3( 0.0 , e   , 0.0 );
    vec3 dz = vec3( 0.0 , 0.0 , e   );

    vec3 p_x0 = snoiseVec3( p - dx );
    vec3 p_x1 = snoiseVec3( p + dx );
    vec3 p_y0 = snoiseVec3( p - dy );
    vec3 p_y1 = snoiseVec3( p + dy );
    vec3 p_z0 = snoiseVec3( p - dz );
    vec3 p_z1 = snoiseVec3( p + dz );

    float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
    float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
    float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

    const float divisor = 1.0 / ( 2.0 * e );
    return normalize( vec3( x , y , z ) * divisor );
  }
`

================================================================================
File: src/store/index.ts
Size: 53 B
================================================================================

export { default, Stage, type State } from "./store";

================================================================================
File: src/store/store.ts
Size: 1.67 kB
================================================================================

import { MutableRefObject, createRef } from "react";
import { create } from "zustand";
import * as THREE from "three";

enum Stage {
  Loading = "Loading",
  OneParticle = "OneParticle",
  LinePlaneAndCube = "LinePlaneAndCube",
  SphereAndSpinningTop = "SphereAndSpinningTop",
  Image = "Image",
  Head = "Head",
  Galaxy = "Galaxy",
}

// particles ref
type ParticlesRef = THREE.Points<THREE.BufferGeometry, THREE.ShaderMaterial> | null;
const particlesRef = createRef<ParticlesRef>() as MutableRefObject<ParticlesRef>;
particlesRef.current = null;

// ref for pausing and reversing the animations
const pause = createRef<boolean>() as MutableRefObject<boolean>;
const reverse = createRef<boolean>() as MutableRefObject<boolean>;
pause.current = false;
reverse.current = false;

// fbo ref
type FBO = {
  renderTarget: THREE.RenderTarget | null;
  renderTarget2: THREE.RenderTarget | null;
  fragmentShader: string | null;
  vertexShader: string | null;
}
type FBORef = {
  positions: FBO;
  velocities: FBO;
  mesh: THREE.Mesh<THREE.BufferGeometry, THREE.ShaderMaterial> | null;
};
const fboRef = createRef<FBORef>() as MutableRefObject<FBORef>;
fboRef.current = { positions: {} as any, velocities: {} as any, mesh: null };

interface State {
  fboRef: MutableRefObject<FBORef>,
  particlesRef: MutableRefObject<ParticlesRef>,
  pause: MutableRefObject<boolean>;
  reverse: MutableRefObject<boolean>;
  setStage: (stage: Stage) => void;
  stage: Stage;
}

const useStore = create<State>((set) => ({
  fboRef,
  particlesRef,
  pause,
  reverse,
  setStage: (stage) => set({ stage }),
  stage: Stage.Loading
}));

export { Stage, type State };
export default useStore;


================================================================================
File: src/styles.css
Size: 933 B
================================================================================

body {
  position: relative;
  margin: 0;
  padding: 0;
  display: flex;
  place-items: center;
  background-color: #021119;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
}

#root {
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

canvas#webgl {
  position: absolute;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
}

p.text {
  position: absolute;
  left: 50%;
  bottom: 40px;
  width: 500px;
  display: flex;
  justify-content: center;
  transform: translateX(-55%);
  color: #e6e6e6;
  font-size: 19px;
  font-weight: normal;
  opacity: 0;
}

p.text span.count {
  flex: 0 0 50%;
  margin-right: 8px;
  text-align: right;
}

p.text span.name {
  flex: 0 0 50%;
  margin-left: 8px;
  text-align: left;
}

.msg {
  z-index: 9999;
}

.msg:after {
  content: "IT'S OVER";
  position: absolute;
  color: #D7D7D7;
  font-size: 48px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

================================================================================
File: src/utils.ts
Size: 691 B
================================================================================

// map between two range of numbers
function map(value: number, x1: number, y1: number, x2: number, y2: number) {
  return ((value - x1) * (y2 - x2)) / (y1 - x1) + x2;
};

// linear interpolation between two numbers
function lerp(a: number, b: number, t: number) {
  return a * (1 - t) + b * t;
};

// asynchronous wait
function wait(milliseconds: number) {
  return new Promise(r => setTimeout(r, milliseconds));
}

// display particles count on the screen
function showParticleCount(count: number) {
  document.querySelector(".count")!.textContent = parseInt(count.toString()).toLocaleString("en-US", { maximumFractionDigits: 0 });
}

export {
  showParticleCount,
  lerp,
  map,
  wait,
}

================================================================================
File: src/vite-env.d.ts
Size: 38 B
================================================================================

/// <reference types="vite/client" />


================================================================================
File: tsconfig.json
Size: 620 B
================================================================================

{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src", "global.d.ts"],
  "references": [{ "path": "./tsconfig.node.json" }]
}


================================================================================
File: tsconfig.node.json
Size: 213 B
================================================================================

{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}


================================================================================
File: vite.config.ts
Size: 243 B
================================================================================

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import glsl from "vite-plugin-glsl";

// https://vitejs.dev/config/
export default defineConfig({
  assetsInclude: ["**/*.gltf"],
  plugins: [react(), glsl()],
});

